<html>
<head><title>js-antescript</title></head>
<script>function expend(element){
	const expended = element.firstElementChild.lastElementChild.style.display === "none";
	element.firstElementChild.lastElementChild.style.display = expended? "": "none";
	element.nextElementSibling.style.display = expended? "none": "";
}
</script>
<body>
<h2>AnteScript</h2>
<ul>
	<li style="cursor:pointer" onclick="expend(this)"><h3>Etymology<span>...</span></h3></li>
	<ul style="display:none">
		<li>In JavaScript, the operator typically stands in between operands, for example: 52 + 20</li>
		<li>In PostScript, the operator typically stands on the right of the operands, for example: 52 20 add</li>
		<li>In AnteScript, the operator typically stands on the left of the operands, for example: add_ (52) (20)</li>
	</ul>
	<li style="cursor:pointer" onclick="expend(this)"><h3>Syntax<span>...</span></h3></li>
	<ul style="display:none">
		<li>In Object Oriented Programming, the method typically stands on the right of the object, for example: circle.surface()</li>
		<li>In Functional Programming, the function stands on the left of the data argument, for example: surface(circle)</li>
		<li>In AnteScript, the application stands on the left of the implementation argument, for example: surface_(circle)</li>
		<li>The AnteScript syntax is close to the Functional Programming syntax</li>
		<li>In AnteScript, applications may be concatenated, for example to compute the surface of the base of a cylinder: surface_(base_)(cylinder)</li>
		<li>In AnteScript, for syntax consistency, the left most application may also be surounded by parentheses, for example: (surface_)(base_)(cylinder)</li>
	</ul>
	<li style="cursor:pointer" onclick="expend(this)"><h3>Concepts<span>...</span></h3></li>
	<ul style="display:none">
		<li style="cursor:pointer" onclick="expend(this)"><h4>Application<span>...</span></h4></li>
		<ul style="display:none">
			<li>In AnteScript, the concept of application corresponds to the concept of function in Functional Programming</li>
			<li>An application is just a name (unlike a function declaration or definition in Functional Programming)</li>
			<li>An application is typically distinguished from other AnteScript concept by a naming convention (an underscore suffix): surface_</li>
			<li>A style preference consists in surounding an application by parentheses, for example: (surface_)(circle)</li>
			<li>Surounding an application by parentheses is not required (if it is the left most), for example: surface_(circle)</li>
			<li>Two or more levels of applications may be concatenated, to represent for example, the "surface" method of the "shape" interface: (surface_)(shape_)</li>
			<li>Several levels of applications may represent a namespace hierarchy as supported by popular programming languages</li>
			<li>Applications representing a namespace hierarchy are specified in reverse order, for example, the System.Collections.IList namespace hierarchy: (list_)(collections_)(system_)</li>
			<li>Unlike popular programming languages, partial namespace path are first-class citizens, for example, in the System.Collections.IList namespace hierarchy: (list_)(collections_)</li>
			<li>Application concatenation is associtive (but not commutative): ((list_)(collections_))(system_) === (list_)((collections_)(system_))</li>
		</ul>
		<li style="cursor:pointer" onclick="expend(this)"><h4>Declaration<span>...</span></h4></li>
		<ul style="display:none">
			<li>In AnteScript, the concept of declaration corresponds to both concepts of class and class consturctor in Object Oriented Programming</li>
			<li>A declaration specifies both the specification and the implementation</li>
			<li>The specification and implementation of a declaration is checked for consistency</li>
			<li>Applying values to a declaration (like calling a class constructor with value arguments) returns a definition</li>
			<li>Declaration can model Algebraic Data Types supported by popular Functional Programmming languages</li>
			<li>A declaration with two (or more) definition values models a product Algebraic Data Type</li>
			<li>A declaration with one definition value that can be defined from two (or mor) different declarations models a sum Algebraic Data Type</li>
			<li>A declaration is the function part in the separation of data and functions in Functional Programming</li>
			<li>A declaration may specify an optional delegation to handle applications that are missing in the implementation (the consistency check between the specification and implementation is looser when a delegation is specified)</li>
		</ul>
		<li style="cursor:pointer" onclick="expend(this)"><h4>Specification<span>...</span></h4></li>
		<ul style="display:none">
			<li>In AnteScript, the concept of specification corresponds to the concept of interface or abstract class in Object Oriented Programming</li>
			<li>A specification lists the supported applications</li>
			<li>A specification lists the supported concatenations of applications</li>
			<li>A specification may be recursive (in case of concatenation of applications)</li>
			<li>A specification may implement invariant applications and invariant concatenations of applications</li>
			<li>An invariant does not depend on the definition values</li>
			<li>A declaration specifies a specification</li>
			<li>A declaration specifying an implementation for an application not listed in the specification results in an error</li>
			<li>A declaration not specifying an implementation for an application listed in the specification results in an error</li>
			<li>A declaration specifying an implementation for an invariant application in the specification results in an error</li>
		</ul>
		<li style="cursor:pointer" onclick="expend(this)"><h4>Implementation<span>...</span></h4></li>
		<ul style="display:none">
			<li>An implementation specifies the code to implement supported applications (like a class definition in Object Oriented Programming)</li>
			<li>An implementation specifies the code to implement supported concatenations of applications (like a private class definition inside a class definition in Object Oriented Programming)</li>
			<li>An implementation may be recursive (in case of concatenation of applications)</li>
		</ul>
		<li style="cursor:pointer" onclick="expend(this)"><h4>Definition<span>...</span></h4></li>
		<ul style="display:none">
			<li>In AnteScript, the concept of definition corresponds to the concept of class instance in Object Oriented Programming</li>
			<li>A definition is defined by applying values to a declaration</li>
			<li>A supported application (or a supported concatenation of applications) may be applied to a definition</li>
			<li>Applying an unsupported application (or a unsupported concatenation of applications) to a definition results in an error</li>
			<li>A definition is the data part in the separation of data and functions in Functional Programming</li>
			<li>A definition encapsulates the values like private data class members in Object Oriented Programming</li>
		</ul>
		<li style="cursor:pointer" onclick="expend(this)"><h4>Extension<span>...</span></h4></li>
		<ul style="display:none">
			<li>In AnteScript, the concept of extension solves the well known Expression Problem in both Functional Programming and Object Oriented Programming</li>
			<li>An extension generates a new specification from a previous declaration by specifing the specifiction for the additional applications</li>
			<li>An extension generates a new implementation from a previous declaration by specifing the implementation for the additional applications</li>
			<li>A new declaration is typically generated with the new specification and the new implementation</li>
			<li>An extension is checked against duplication of specification attributes and implementation attributes</li>
			<li>In AnteScript, an extension application has the same nature as basic application without any additional limitation (unlike C# extention methods which cannot access private values and do not support polymorphism)</li>
		</ul>
	</ul>
	<li style="cursor:pointer" onclick="expend(this)"><h3>Notes<span>...</span></h3></li>
	<ul style="display:none">
		<li>AnteScript is dynamically typed</li>
		<li>Although AnteScript is dynamically typed, a definition is checked for consistency with its specification before any implmementation is generated and used</li>
		<li>AnteScript supports an Object Oriented Programming form of polymorphism (interface polymorphism) which transparently supports heterogeneous collections</li>
		<li>AnteScript promotes Functional Programming paradigms notably, immutability, referencial transparency, declarative style, composition, point-free style, curying...</li>
		<li>AnteScript does not support inheritance (this is not a lack, this is a feature) except for the relationship between a specification and a definition</li>
		<li>AnteScript does not support overriding (this is not a lack, this is a feature), notably, an invariant application specified in a specification cannot be specified in the associated definition</li>
		<li>In AnteScript, the concept of specification corresponds to the concept of function declaration in Functional Programming</li>
		<li>In AnteScript, the concept of definition corresponds to the concept of function definition in Functional Programming</li>
		<li>In AnteScript, the concept of declaration can ensures the "strong static type safety" criteria of the Expression Problem (by loading separate JavaScript files)</li>
		<li>In AnteScript, composition is simply the concatenation of applications (point-free), for example, to compose the base of the cynlinder with the surface of the circle: (surface_)(base_)(cylinder)</li>
		<li>AnteScript supports multiple-dispatch, the actual code applied depends on more than one argument, for example to add two operands which are either integer, decimal or string: (add_)(operand1)(operand2)</li>
		<li>AnteScript is currently a JavaScript meta-language (the language keywords which names may be freely chosen are actualy JavaScript functions provided by mean of a 350 line JavaScript GUID module)</li> 
		<li>AnteScript defines the following keywords: APPLICATION, DECLARATION, SPECIFICATION, IMPLEMENTATION, EXTENSION</li>
		<li>The APPLICATION keyword is used to declare applications, for example in the below example: surface_</li>
		<li>The DECLARATION keyword is used to specify declarations, for example in the below example: cube</li>
		<li>The SPECIFICATION keyword is used to declare specifications, for example in the below example: shape</li>
		<li>The IMPLEMENTATION keyword is used to declare implementations, for example in the below example: cube</li>
		<li>The EXTENSION keyword is used to declare extensions as a special case of specifications and definitions (the Expression Problem is taken into account by the AnteScript language design in a simple and natural way)</li>
		<li>Alternatively, extension may be specified using the optional delegation in the declaration (this mechanism is more versatile than the EXTENSION mechanism but does not ensure that the implementation conforms to the specification)</li>
		<li>An application is typically referenced by a JavaScript variable of the same name (using "const" JavaScript keyword to warn about dulicates or "var" to allow independent specifications sharing the same applications)</li>
		<li>Applications are memoized (calling APPLICATION several times with the same name argument always return the same JavaScript function)</li>
		<li>The current implementation of AnteScript has a large overhead compared to direct JavaScript function calls (linear with the level of applications but constant in the total number of applications)</li>
		<li>AnteScript runtime errors are dealt with by providing an optional custom error function</li>
		<li>AnteScript is currently a proof of concept (the overhead compared to direct JavaScript function calls may impact performance)</li>
		<li>AnteScript is currently implemented using pure functions only (with a significant use of JavaScript WeakMap objects)</li>
		<li>AnteScript could be implemented as a compiled language (obviously, the first compiler would be implemented using the JavaScript version of AnteScript)</li>
	</ul>
	<li style="cursor:pointer" onclick="expend(this)"><h3>Sample<span>...</span></h3></li>
	<ul style="display:none"><pre>
	const label_ = APPLICATION("label_");
	const surface_ = APPLICATION("surface_");
	const volume_ = APPLICATION("volume_");
	const stretch_ = APPLICATION("stretch_");
	const invariant_ = APPLICATION("invariant_");

	const shape = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, implementation => ((volume_)(shape_)(implementation) * (volume_)(shape_)(implementation)) / ((surface_)(shape_)(implementation) * (surface_)(shape_)(implementation) * (surface_)(shape_)(implementation))],
		])],
	]);

	const cube = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => side => `cube of side ${side}`],
			[surface_, implementation => side => side * side * 6],
			[volume_, implementation => side => side * side * side],
			[stretch_, implementation => side => k => cube(side * k)],
		])],
	]));

	const sphere = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => radius => `sphere of radius ${radius}`],
			[surface_, implementation => radius => radius * radius * Math.PI * 4],
			[volume_, implementation => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, implementation => radius => k => sphere(radius * k)],
		])],
	]));

	const cube1 = cube(1);
	const cube2 = (stretch_)(shape_)(cube1)(2);
	const sphere1 = sphere(0.5);
	const sphere2 = (stretch_)(shape_)(sphere1)(2);

	const label1 = (label_)(cube1); // "cube of side 1"
	const label2 = (label_)(cube2); // "cube of side 2"
	const label3 = (label_)(sphere1); // "sphere of radius 0.5"
	const label4 = (label_)(sphere2); // "sphere of radius 1"

	const invariant1 = (invariant_)(cube1); // 0.004629629629629629
	const invariant2 = (invariant_)(cube2); // 0.004629629629629629
	const invariant3 = (invariant_)(sphere1); // 0.008841941282883074
	const invariant4 = (invariant_)(sphere2); // 0.008841941282883074

	// open browser console to see test results...
	</pre></ul>
</ul>
<script src="js-antescript.js"></script>
<script>
"use strict";

//todo add C# and Haskell comparaison documentation

const { APPLICATION, DECLARATION, SPECIFICATION, IMPLEMENTATION, EXTENSION } = AnteScript38bcbbba54324bf388d8c776e9b184f3(error);

function error(message, applications){
	throw message + (applications? (": " + applications.reduce(function(accumulator, application){
		return "(" + application.name + ")" + accumulator;
	}, "")): "");
}

(function(){
	// level 1 applications
	var label_ = APPLICATION("label_");
	var surface_ = APPLICATION("surface_");
	var volume_ = APPLICATION("volume_");
	var stretch_ = APPLICATION("stretch_");
	var invariant_ = APPLICATION("invariant_");
	var weight_ = APPLICATION("weight_");
	var alignment_ = APPLICATION("alignment_");
	var test_ = APPLICATION("test_");

	// level 2 applications
	var shape_ = APPLICATION("shape_");
	var solid_ = APPLICATION("solid_");

	const shape = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, definition => ((volume_)(shape_)(definition) * (volume_)(shape_)(definition)) / ((surface_)(shape_)(definition) * (surface_)(shape_)(definition) * (surface_)(shape_)(definition))],
			[alignment_],
		])],
	]);

	const solid = SPECIFICATION([
		[solid_, SPECIFICATION([
			[label_],
			[weight_],
			[alignment_],
			[test_],
		])],
	]);

	const cube = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => side => `cube of side ${side}`],
			[surface_, definition => side => side * side * 6],
			[volume_, definition => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
			[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
		])],
	]));

	const sphere = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => radius => `sphere of radius ${radius}`],
			[surface_, definition => radius => radius * radius * Math.PI * 4],
			[volume_, definition => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
			[alignment_, definition => radius => o => typeof o === "number"? o + 2 * radius: alignment_(o)(2 * radius)],
		])],
	]));

	const object = DECLARATION(solid, IMPLEMENTATION([
		[solid_, IMPLEMENTATION([
			[label_, definition => (shape, density) => `object of density ${density} and shape ${label_(shape)}`],
			[weight_, definition => (shape, density) => volume_(shape) * density],
			[alignment_, definition => (shape, density) => o => alignment_(shape)(o)],
			[test_, definition => (shape, density) => weight_(solid_)(definition)],
		])],
	]));

	const cube1 = cube(1);
	const cube2 = stretch_(shape_(cube1))(2);
	const sphere1 = sphere(0.5);
	const sphere2 = stretch_(shape_(sphere1))(2);

	// heterogeneous collection
	const shapes = [cube1, cube2, sphere1, sphere2];

	const invariants = shapes.reduce(function(results, item){
		return results + label_(shape_(item)) + ": " + invariant_(shape_(item)) + "\n";
	}, "invariants: \n");

	// <label>: <invariant>
	// <label>: <invariant>
	// ...
	console.log(invariants);

	const objects = shapes.map(function(item){
		return object(shape_(item), 10);
	});

	const weights = objects.reduce(function(results, item){
		return results + label_(solid_(item)) + ": " + weight_(solid_(item)) + "\n";
	}, "weights: \n");

	// <label>: <weight>
	// <label>: <weight>
	// ...
	console.log(weights);

	console.log("alignments:");
	console.log("alignment of " + label_(shape_)(cube1) + " And " + label_(shape_)(cube2) + ": " + alignment_(shape_(cube1))(shape_(cube2)));
	console.log("alignment of " + label_(shape_)(cube1) + " And " + label_(shape_)(sphere1) + ": " + alignment_(shape_(cube1))(shape_(sphere1)));
	console.log("alignment of " + label_(shape_)(cube1) + " And " + label_(solid_)(object(shape_(sphere1), 7)) + ": " + alignment_(shape_(cube1))(solid_(object(shape_(sphere1), 7))));
	console.log("alignment of " + label_(solid_)(object(shape_(cube1), 4)) + " And " + label_(shape_)(sphere1) + ": " + alignment_(solid_(object(shape_(cube1), 4)))(shape_(sphere1)));
	console.log("alignment of " + label_(solid_)(object(shape_(cube1), 4)) + " And " + label_(solid_)(object(shape_(sphere1), 7)) + ": " + alignment_(solid_(object(shape_(cube1), 4)))(solid_(object(shape_(sphere1), 7))));

	console.log("tests:");

	const object1 = object(shape_(cube(5)), 15);
	const weight1 = weight_(solid_)(object1);
	const test1 = test_(solid_)(object1);
	console.log(test1 + " === " + weight1 + ": " + (test1 === weight1));

	var application0_ = APPLICATION("application0_");
	var application1_ = APPLICATION("application1_");
	var application2_ = APPLICATION("application2_");
	var application3_ = APPLICATION("application3_");
	var application4_ = APPLICATION("application4_");

	const definitionTest = DECLARATION(SPECIFICATION([
		[application4_, SPECIFICATION([
			[application3_, SPECIFICATION([
				[application2_, SPECIFICATION([
					[application1_],
				])],
			])],
		])],
	]), IMPLEMENTATION([
		[application4_, IMPLEMENTATION([
			[application3_, IMPLEMENTATION([
				[application2_, IMPLEMENTATION([
					[application1_, definition => value => value],
				])],
			])],
		])],
	]));

	const test2 = application1_(application2_)(application3_)(application4_)(definitionTest(222));
	console.log(test2 + " === 222: " + (test2 === 222));

	const test3 = application1_(application2_)(application3_)(application4_(definitionTest(333)));
	console.log(test3 + " === 333: " + (test3 === 333));

	const test4 = application1_(application2_)(application3_(application4_(definitionTest(444))));
	console.log(test4 + " === 444: " + (test4 === 444));

	const test5 = application1_(application2_(application3_(application4_(definitionTest(555)))));
	console.log(test5 + " === 555: " + (test5 === 555));

	const test6 = application1_(application2_)(application3_(application4_))(definitionTest(666));
	console.log(test6 + " === 666: " + (test6 === 666));

	const test7 = application1_(application2_(application3_))(application4_)(definitionTest(777));
	console.log(test7 + " === 777: " + (test7 === 777));

	const test8 = application1_(application2_)(application3_(application4_))(definitionTest(888));
	console.log(test8 + " === 888: " + (test8 === 888));
})();

console.log("compositions:");
(function(){
	var value_ = APPLICATION("value_");
	var next_ = APPLICATION("next_");
	var previous_ = APPLICATION("previous_");
	var double_ = APPLICATION("double_");
	var half_ = APPLICATION("half_");

	const number = DECLARATION(SPECIFICATION([
		[value_],
		[next_],
		[previous_],
		[double_],
		[half_],
	]), IMPLEMENTATION([
		[value_, definition => value => value],
		[next_, definition => value => number(value + 1)],
		[previous_, definition => value => number(value - 1)],
		[double_, definition => value => number(value * 2)],
		[half_, definition => value => number(value / 2)],
	]));

	const composition1 = double_(previous_)(half_)(next_)(number(13));
	console.log(value_(composition1) + " === 12: " + (value_(composition1) === 12));

	const composition2 = double_(previous_)(half_)(next_(number(13)));
	console.log(value_(composition2) + " === 12: " + (value_(composition2) === 12));

	const composition3 = double_(previous_)(half_(next_(number(13))));
	console.log(value_(composition3) + " === 12: " + (value_(composition3) === 12));

	const composition4 = double_(previous_(half_(next_(number(13)))));
	console.log(value_(composition4) + " === 12: " + (value_(composition4) === 12));

	const composition5 = double_(previous_)(half_(next_))(number(13));
	console.log(value_(composition5) + " === 12: " + (value_(composition5) === 12));

	const composition6 = double_(previous_(half_))(next_)(number(13));
	console.log(value_(composition6) + " === 12: " + (value_(composition6) === 12));

	const composition7 = double_(previous_)(half_(next_))(number(13));
	console.log(value_(composition7) + " === 12: " + (value_(composition7) === 12));

	const composition8 = ((double_)(previous_)(((half_)(next_))(number(13))));
	console.log(value_(composition8) + " === 12: " + (value_(composition8) === 12));

	const composition9 = (((double_)(previous_))((half_)(next_)))(number(13));
	console.log(value_(composition9) + " === 12: " + (value_(composition9) === 12));
})();

console.log("chains:");
(function(){
	var first_ = APPLICATION("first_");
	var second_ = APPLICATION("second_");

	const tree = DECLARATION(SPECIFICATION([
		[first_],
		[second_],
	]), IMPLEMENTATION([
		[first_, definition => value => typeof(value[0]) === "object"? tree(value[0]): value[0]],
		[second_, definition => value => typeof(value[1]) === "object"? tree(value[1]): value[1]],
	]));

	const tree1 = tree([
		[11, 21],
		[12, 22],
	]);

	const chain11 = (first_)(first_)(tree1);
	console.log(chain11 + " === 11: " + (chain11 === 11));

	const chain12 = (first_)(second_)(tree1);
	console.log(chain12 + " === 12: " + (chain12 === 12));

	const chain21 = (second_)(first_)(tree1);
	console.log(chain21 + " === 21: " + (chain21 === 21));

	const chain22 = (second_)(second_)(tree1);
	console.log(chain22 + " === 22: " + (chain22 === 22));

	console.log("combinations:");

	var value_ = APPLICATION("value_");
	var add_ = APPLICATION("add_");
	var addString_ = APPLICATION("addString_");
	var addInteger_ = APPLICATION("addInteger_");
	var addDecimal_ = APPLICATION("addDecimal_");
	var string_ = APPLICATION("string_");
	var numerator_ = APPLICATION("numerator_");
	var denominator_ = APPLICATION("denominator_");

	const integer = DECLARATION(SPECIFICATION([
		[value_],
		[string_],
		[add_],
		[addInteger_],
		[addDecimal_],
		[addString_, definition => addition => string(string_(addition) + string_(definition))],
	]), IMPLEMENTATION([
		[value_, definition => value => value],
		[string_, definition => value => value.toString()],
		[add_, definition => value => addition => addInteger_(addition)(definition)],
		[addInteger_, definition => value => addition => integer(value + value_(addition))],
		[addDecimal_, definition => value => addition => decimal(value * denominator_(addition) + numerator_(addition), denominator_(addition))],
	]));

	const decimal = DECLARATION(SPECIFICATION([
		[numerator_],
		[denominator_],
		[string_],
		[add_],
		[addInteger_],
		[addDecimal_],
		[addString_, definition => addition => string(string_(addition) + string_(definition))],
	]), IMPLEMENTATION([
		[numerator_, definition => (numerator, denominator) => numerator],
		[denominator_, definition => (numerator, denominator) => denominator],
		[string_, definition => (numerator, denominator) => numerator.toString() + "/" + denominator.toString()],
		[add_, definition => (numerator, denominator) => addition => addDecimal_(addition)(definition)],
		[addInteger_, definition => (numerator, denominator) => addition => decimal(numerator + value_(addition) * denominator, denominator)],
		[addDecimal_, definition => (numerator, denominator) => addition => decimal(numerator * denominator_(addition) + numerator_(addition) * denominator, denominator * denominator_(addition))],
	]));

	const string = DECLARATION(SPECIFICATION([
		[string_],
		[add_],
		[addInteger_],
		[addDecimal_],
		[addString_, definition => addition => string(string_(addition) + string_(definition))],
	]), IMPLEMENTATION([
		[string_, definition => value => value],
		[add_, definition => value => addition => addString_(addition)(definition)],
		[addInteger_, definition => value => addition => string(string_(addition) + value)],
		[addDecimal_, definition => value => addition => string(string_(addition) + value)],
	]));

	const combination1 = (string_)((add_)(integer(13))(integer(10)));
	console.log(combination1 + " === 23: " + (combination1 === "23"));

	const combination2 = (string_)((add_)(integer(3))(decimal(5, 7)));
	console.log(combination2 + " === 26/7: " + (combination2 === "26/7"));

	const combination3 = (string_)((add_)(decimal(5, 7))(integer(3)));
	console.log(combination3 + " === 26/7: " + (combination3 === "26/7"));

	const combination4 = (string_)((add_)(decimal(5, 7))(string("qwerty")));
	console.log(combination4 + " === 5/7qwerty: " + (combination4 === "5/7qwerty"));

	const combination5 = (string_)((add_)(string("azerty"))(decimal(5, 7)));
	console.log(combination5 + " === azerty5/7: " + (combination5 === "azerty5/7"));

	const combination6 = (string_)((add_)(string("azerty"))(integer(57)));
	console.log(combination6 + " === azerty57: " + (combination6 === "azerty57"));

	const combination7 = (string_)((add_)(integer(57))(string("qwerty")));
	console.log(combination7 + " === 57qwerty: " + (combination7 === "57qwerty"));

	const combination8 = (string_)((add_)(string("azerty"))(string("qwerty")));
	console.log(combination8 + " === azertyqwerty: " + (combination8 === "azertyqwerty"));
})();

console.log("recursions:");
(function(){
	var nil_ = APPLICATION("nil_");
	var head_ = APPLICATION("head_");
	var tail_ = APPLICATION("tail_");
	var extent_ = APPLICATION("extent_");
	var translation_ = APPLICATION("translation_");
	var collection_ = APPLICATION("collection_");
	var reduction_ = APPLICATION("reduction_");
	var array_ = APPLICATION("array_");

	const list0 = (function(){
		const list = DECLARATION(SPECIFICATION([
			[nil_],
			[head_],
			[tail_],
			[extent_],
			[translation_],
			[collection_],
			[reduction_],
			[array_, definition => reduction_(definition)(value => accumulation => [value, ...accumulation])([])],
		]), IMPLEMENTATION([
			[nil_, definition => (head, tail) => nil],
			[head_, definition => (head, tail) => head],
			[tail_, definition => (head, tail) => definition === nil? nil: tail],
			[extent_, definition => (head, tail) => value => list(value, definition)],
			[translation_, definition => (head, tail) => translation => definition === nil? nil: list(translation(head), translation_(tail)(translation))],
			[collection_, definition => (head, tail) => collection => definition === nil? nil: collection(head)? list(head, collection_(tail)(collection)): collection_(tail)(collection)],
			[reduction_, definition => (head, tail) => reduction => accumulation => definition === nil? accumulation: (reduction_(tail)(reduction))(reduction(head)(accumulation))],
		]));
		const nil = list();
		return nil;
	})();

	const list1 = (extent_)(list0)(10);
	const list2 = (extent_)(list1)(100);
	const list3 = (extent_)(list2)(1000);

	console.log((head_)(list3) + " === 1000: " + ((head_)(list3) === 1000));
	console.log((head_)(tail_)(list3) + " === 100: " + ((head_)(tail_)(list3) === 100));
	console.log((head_)(tail_)(tail_)(list3) + " === 10: " + ((head_)(tail_)(tail_)(list3) === 10));
	console.log((head_)(tail_)(tail_)(tail_)(list3) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(list3) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(list3) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(list3) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list3) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list3) === undefined));

	const list4 = (translation_)(list3)(value => value + 1);

	console.log((head_)(list4) + " === 1001: " + ((head_)(list4) === 1001));
	console.log((head_)(tail_)(list4) + " === 101: " + ((head_)(tail_)(list4) === 101));
	console.log((head_)(tail_)(tail_)(list4) + " === 11: " + ((head_)(tail_)(tail_)(list4) === 11));
	console.log((head_)(tail_)(tail_)(tail_)(list4) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(list4) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(list4) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(list4) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list4) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list4) === undefined));

	const list5 = (collection_)(list4)(value => value !== 101);

	console.log((head_)(list5) + " === 1001: " + ((head_)(list5) === 1001));
	console.log((head_)(tail_)(list5) + " === 11: " + ((head_)(tail_)(list5) === 11));
	console.log((head_)(tail_)(tail_)(list5) + " === undefined: " + ((head_)(tail_)(tail_)(list5) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(list5) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(list5) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(list5) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(list5) === undefined));
	console.log((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list5) + " === undefined: " + ((head_)(tail_)(tail_)(tail_)(tail_)(tail_)(list5) === undefined));

	const accumulation4 = (reduction_)(list4)(value => accumulation => value + accumulation)(909);

	console.log(accumulation4 + " === 2022: " + (accumulation4 === 2022));

	const array4 = (array_)(list4);

	console.log(array4 + " === 11,101,1001: " + (JSON.stringify(array4) === "[11,101,1001]"));
})();

console.log("extensions:");
(function(){
	var shape_ = APPLICATION("shape_");
	var label_ = APPLICATION("label_");
	var surface_ = APPLICATION("surface_");
	var volume_ = APPLICATION("volume_");
	var stretch_ = APPLICATION("stretch_");
	var invariant_ = APPLICATION("invariant_");
	var weight_ = APPLICATION("weight_");
	var alignment_ = APPLICATION("alignment_");
	var test_ = APPLICATION("test_");
	const shape = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, definition => ((volume_)(shape_)(definition) * (volume_)(shape_)(definition)) / ((surface_)(shape_)(definition) * (surface_)(shape_)(definition) * (surface_)(shape_)(definition))],
			[alignment_],
		])],
	]);
	const cube = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => side => `cube of side ${side}`],
			[surface_, definition => side => side * side * 6],
			[volume_, definition => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
			[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
		])],
	]));
	const sphere = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => radius => `sphere of radius ${radius}`],
			[surface_, definition => radius => radius * radius * Math.PI * 4],
			[volume_, definition => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
			[alignment_, definition => radius => o => typeof o === "number"? o + 2 * radius: alignment_(o)(2 * radius)],
		])],
	]));

	var stretch2_ = APPLICATION("stretch2_");
	var stretch3_ = APPLICATION("stretch3_");
	const specificationx = SPECIFICATION([
		[shape_, SPECIFICATION([
			[stretch2_, definition => (stretch_)(shape_)(definition)(2)],
			[stretch3_],
		])],
	]);
	const cubex = DECLARATION(EXTENSION(sphere)(specificationx), EXTENSION(cube)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[stretch3_, definition => side => cube(side * 3)],
		])],
	])));
	const spherex = DECLARATION(EXTENSION(sphere)(specificationx), EXTENSION(sphere)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[stretch3_, definition => radius => sphere(radius * 3)],
		])],
	])));

	const cubex1 = cubex(1); 
	console.log((label_)(shape_)(cubex1) + " === cube of side 1: " + ((label_)(shape_)(cubex1) === "cube of side 1"));

	const cubex2 = (stretch2_)(shape_)(cubex1);
	console.log((label_)(shape_)(cubex2) + " === cube of side 2: " + ((label_)(shape_)(cubex2) === "cube of side 2"));

	const cubex3 = (stretch3_)(shape_)(cubex1);
	console.log((label_)(shape_)(cubex3) + " === cube of side 3: " + ((label_)(shape_)(cubex3) === "cube of side 3"));

	const spherex1 = spherex(1);
	console.log((label_)(shape_)(spherex1) + " === sphere of radius 1: " + ((label_)(shape_)(spherex1) === "sphere of radius 1"));

	const spherex2 = (stretch2_)(shape_)(spherex1);
	console.log((label_)(shape_)(spherex2) + " === sphere of radius 2: " + ((label_)(shape_)(spherex2) === "sphere of radius 2"));

	const spherex3 = (stretch3_)(shape_)(spherex1);
	console.log((label_)(shape_)(spherex3) + " === sphere of radius 3: " + ((label_)(shape_)(spherex3) === "sphere of radius 3"));

	var stretch2_ = APPLICATION("stretch2_");
	var stretch4_ = APPLICATION("stretch4_");
	const specificationxx = EXTENSION(shape)(SPECIFICATION([
		[shape_, SPECIFICATION([
			[stretch2_, definition => (stretch_)(shape_)(definition)(2)],
			[stretch4_, definition => (stretch2_)(shape_)(stretch2_)(shape_)(definition)],
		])],
	]));
	const cubexx = DECLARATION(specificationxx, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => side => `cube of side ${side}`],
			[surface_, definition => side => side * side * 6],
			[volume_, definition => side => side * side * side],
			[stretch_, definition => side => k => cubexx(side * k)],
			[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
		])],
	]));
	const spherexx = DECLARATION(specificationxx, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => radius => `sphere of radius ${radius}`],
			[surface_, definition => radius => radius * radius *Math.PI * 4],
			[volume_, definition => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => spherexx(radius * k)],
			[alignment_, definition => radius => o => typeof o === "number"? o + 2 * radius: alignment_(o)(2 * radius)],
		])],
	]));

	const cubexx1 = cubexx(1); 
	console.log((label_)(shape_)(cubexx1) + " === cube of side 1: " + ((label_)(shape_)(cubexx1) === "cube of side 1"));

	const cubexx2 = (stretch2_)(shape_)(cubexx1);
	console.log((label_)(shape_)(cubexx2) + " === cube of side 2: " + ((label_)(shape_)(cubexx2) === "cube of side 2"));

	var stretch2_ = APPLICATION("stretch2_");

	const cubexx3 = (stretch2_)(shape_)(cubexx1);
	console.log((label_)(shape_)(cubexx3) + " === cube of side 2: " + ((label_)(shape_)(cubexx3) === "cube of side 2"));

	const cubexx4 = (stretch4_)(shape_)(cubexx1);
	console.log((label_)(shape_)(cubexx4) + " === cube of side 4: " + ((label_)(shape_)(cubexx4) === "cube of side 4"));

	const spherexx1 = spherexx(1);
	console.log((label_)(shape_)(spherexx1) + " === sphere of radius 1: " + ((label_)(shape_)(spherexx1) === "sphere of radius 1"));

	const spherexx2 = (stretch2_)(shape_)(spherexx1);
	console.log((label_)(shape_)(spherexx2) + " === sphere of radius 2: " + ((label_)(shape_)(spherexx2) === "sphere of radius 2"));

	const spherexx4 = (stretch4_)(shape_)(spherexx1);
	console.log((label_)(shape_)(spherexx4) + " === sphere of radius 4: " + ((label_)(shape_)(spherexx4) === "sphere of radius 4"));

	var solid_ = APPLICATION("solid_");
	const cubexxx = DECLARATION(EXTENSION(cube)(SPECIFICATION([
		[solid_, SPECIFICATION([
			[weight_],
		])],
	])), EXTENSION(cube)(IMPLEMENTATION([
		[solid_, IMPLEMENTATION([
			[weight_, definition => side => density => density * (volume_)(shape_)(definition)],
			])],
	])));

	const cubexxx2 = cubexxx(2); 
	console.log((label_)(shape_)(cubexxx2) + " === cube of side 2: " + ((label_)(shape_)(cubexxx2) === "cube of side 2"));

	const volumexxx2 = (volume_)(shape_)(cubexxx2);
	console.log(volumexxx2 + " === 8: " + (volumexxx2 === 8));

	const weightxxx2 = (weight_)(solid_)(cubexxx2)(10);
	console.log(weightxxx2 + " === 80: " + (weightxxx2 === 80));

	const specificationxxxx = EXTENSION()(SPECIFICATION([
		[shape_, SPECIFICATION([
			[stretch2_, definition => (stretch_)(shape_)(definition)(2)],
			[stretch4_, definition => (stretch2_)(shape_)(stretch2_)(shape_)(definition)],
		])],
	]));

	const inceptionxxxx1 = specificationxxxx.mapping();
	console.log("specificationxxxx.mapping() === [shape_]: " + (Array.isArray(inceptionxxxx1) && inceptionxxxx1.length === 1 && inceptionxxxx1[0] === shape_));

	const inceptionxxxx2 = specificationxxxx.mapping(shape_).mapping();
	console.log("specificationxxxx.mapping(shape_).mapping() === [stretch2_,stretch4_]: " + (Array.isArray(inceptionxxxx2) && inceptionxxxx2.length === 2 && inceptionxxxx2[0] === stretch2_ && inceptionxxxx2[1] === stretch4_));

	var tool_ = APPLICATION("tool_");
	var tool1_ = APPLICATION("tool1_");
	var tool2_ = APPLICATION("tool2_");
	const toolxxxxx = DECLARATION(EXTENSION()(SPECIFICATION([
		[tool_, SPECIFICATION([
			[tool1_, definition => Math.PI],
			[tool2_, definition => Math.pow(2, 1/2)],
		])],
	])), undefined);
	const toolxxxxx1 = toolxxxxx();

	const tool1xxxxx1 = (tool1_)(tool_)(toolxxxxx1);
	console.log(tool1xxxxx1 + " === 3.141592653589793: " + (tool1xxxxx1 === 3.141592653589793));

	const tool2xxxxx1 = (tool2_)(tool_)(toolxxxxx1);
	console.log(tool2xxxxx1 + " === 1.4142135623730951: " + (tool2xxxxx1 === 1.4142135623730951));

	const toolxxxxxx = DECLARATION(EXTENSION(cube)(SPECIFICATION([
		[tool_, SPECIFICATION([
			[tool1_, definition => Math.PI],
			[tool2_, definition => Math.pow(2, 1/2)],
		])],
	])), EXTENSION(cube)(IMPLEMENTATION([
	])));
	const toolxxxxxx1 = toolxxxxxx();

	const tool1xxxxxx1 = (tool1_)(tool_)(toolxxxxxx1);
	console.log(tool1xxxxxx1 + " === 3.141592653589793: " + (tool1xxxxxx1 === 3.141592653589793));

	const tool2xxxxxx1 = (tool2_)(tool_)(toolxxxxxx1);
	console.log(tool2xxxxxx1 + " === 1.4142135623730951: " + (tool2xxxxxx1 === 1.4142135623730951));
})();

console.log("expression problem:");
(function(){
	////////////////////////////////////////////////////////////////////////////////////////
	// script a (V1):
	const shape_ = APPLICATION("shape_");
	const label_ = APPLICATION("label_");
	const surface_ = APPLICATION("surface_");
	const volume_ = APPLICATION("volume_");
	const stretch_ = APPLICATION("stretch_");
	const invariant_ = APPLICATION("invariant_");
	const shapeV1 = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, implementation => ((volume_)(shape_)(implementation) * (volume_)(shape_)(implementation)) / ((surface_)(shape_)(implementation) * (surface_)(shape_)(implementation) * (surface_)(shape_)(implementation))],
		])],
	]);
	////////////////////////////////////////////////////////////////////////////////////////
	// script b (V1):
	const cubeV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => side => `cube of side ${side}`],
			[surface_, implementation => side => side * side * 6],
			[volume_, implementation => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script c (V1):
	const sphereV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => radius => `sphere of radius ${radius}`],
			[surface_, implementation => radius => radius * radius * Math.PI * 4],
			[volume_, implementation => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script d (V2):
	const container_ = APPLICATION("container_");
	const shapeV2 = EXTENSION(shapeV1)(SPECIFICATION([
		[shape_, SPECIFICATION([
			[container_],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script e (V2):
	const cubeV2 = DECLARATION(shapeV2, EXTENSION(cubeV1)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => side => volume => cube(Math.pow(volume, 1/3))],
		])],
	])));
	////////////////////////////////////////////////////////////////////////////////////////
	// script f (V2):
	const sphereV2 = DECLARATION(shapeV2, EXTENSION(sphereV1)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => radius => volume => sphere(Math.pow((3/4) * volume / Math.PI, 1/3))],
		])],
	])));
	////////////////////////////////////////////////////////////////////////////////////////
	// script g (V2):
	const cylinderV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => (radius, height) => `cylinder of radius ${radius} and height ${height}`],
			[surface_, implementation => (radius, height) => radius * radius * Math.PI * 2 + height * radius * Math.PI * 2],
			[volume_, implementation => (radius, height) => height * radius * radius * Math.PI],
			[stretch_, implementation => (radius, height) => k => cylinder(radius * k, height * k)],
			[container_, definition => (radius, height) => volume => cylinder(Math.pow(4 * volume / Math.PI, 1/3) / 2, Math.pow(4 * volume / Math.PI, 1/3))],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script h (V3):
	const wrapper_ = APPLICATION("wrapper_");
	const shapeV3 = EXTENSION(shapeV2)(SPECIFICATION([
		[shape_, SPECIFICATION([
			[wrapper_],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script i (V3):
	const cubeV3 = DECLARATION(shapeV3, EXTENSION(cubeV2)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, side) => surface => cube(Math.pow(surface / 6, 1/2))],
		])],
	])));
	////////////////////////////////////////////////////////////////////////////////////////
	// script j (V3):
	const sphereV3 = DECLARATION(shapeV3, EXTENSION(sphereV2)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius) => surface => sphere(Math.pow((1/4) * surface / Math.PI, 1/2))],
		])],
	])));
	////////////////////////////////////////////////////////////////////////////////////////
	// script k (V3):
	const cylinderV3 = DECLARATION(shapeV3, EXTENSION(cylinderV2)(IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius, height) => surface => cylinder(Math.pow((1/6) * surface / Math.PI, 1/2), 2 * Math.pow((1/6) * surface / Math.PI, 1/2))],
		])],
	])), true);
	////////////////////////////////////////////////////////////////////////////////////////
	// script l (V3):
	const cube = cubeV3;
	const sphere = sphereV3;
	const cylinder = cylinderV3;
	////////////////////////////////////////////////////////////////////////////////////////
	// script m (V3):
	const cube1 = cube(1);
	const cube2 = (stretch_)(shape_)(cube1)(2);
	const cube3 = (container_)(shape_)(cube2)(1);
	const cube4 = (stretch_)(shape_)(cube3)(2);
	const cube5 = (wrapper_)(shape_)(cube4)(6);
	const sphere1 = sphere(0.5);
	const sphere2 = (stretch_)(shape_)(sphere1)(2);
	const sphere3 = (container_)(shape_)(sphere2)(1);
	const sphere4 = (stretch_)(shape_)(sphere3)(2);
	const sphere5 = (wrapper_)(shape_)(sphere4)(6);
	const cylinder1 = cylinder(0.5, 1);
	const cylinder2 = (stretch_)(shape_)(cylinder1)(2);
	const cylinder3 = (container_)(shape_)(cylinder2)(1);
	const cylinder4 = (stretch_)(shape_)(cylinder3)(2);
	const cylinder5 = (wrapper_)(shape_)(cylinder4)(6);
	const label1 = (label_)(shape_)(cube1); // "cube of side 1"
	const label2 = (label_)(shape_)(cube2); // "cube of side 2"
	const label3 = (label_)(shape_)(cube3); // "cube of side 1"
	const label4 = (label_)(shape_)(cube4); // "cube of side 2"
	const label5 = (label_)(shape_)(cube5); // "cube of side 1"
	const label6 = (label_)(shape_)(sphere1); // "sphere of radius 0.5"
	const label7 = (label_)(shape_)(sphere2); // "sphere of radius 1"
	const label8 = (label_)(shape_)(sphere3); // "sphere of radius 0.6203504908994"
	const label9 = (label_)(shape_)(sphere4); // "sphere of radius 1.2407009817988"
	const label10 = (label_)(shape_)(sphere5); // "sphere of radius 0.690988298942671"
	const label11 = (label_)(shape_)(cylinder1); // "cylinder of radius 0.5 and height 1"
	const label12 = (label_)(shape_)(cylinder2); // "cylinder of radius 1 and height 2"
	const label13 = (label_)(shape_)(cylinder3); // "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"
	const label14 = (label_)(shape_)(cylinder4); // "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"
	const label15 = (label_)(shape_)(cylinder5); // "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"
	const surface1 = (surface_)(shape_)(cube1); // 6
	const surface2 = (surface_)(shape_)(cube2); // 24
	const surface3 = (surface_)(shape_)(cube3); // 6
	const surface4 = (surface_)(shape_)(cube4); // 24
	const surface5 = (surface_)(shape_)(cube5); // 6
	const surface6 = (surface_)(shape_)(sphere1); // 3.141592653589793
	const surface7 = (surface_)(shape_)(sphere2); // 12.566370614359172
	const surface8 = (surface_)(shape_)(sphere3); // 4.835975862049408
	const surface9 = (surface_)(shape_)(sphere4); // 19.343903448197633
	const surface10 = (surface_)(shape_)(sphere5); // 6.000000000000001
	const surface11 = (surface_)(shape_)(cylinder1); // 4.71238898038469
	const surface12 = (surface_)(shape_)(cylinder2); // 18.84955592153876
	const surface13 = (surface_)(shape_)(cylinder3); // 5.535810445932086
	const surface14 = (surface_)(shape_)(cylinder4); // 22.143241783728342
	const surface15 = (surface_)(shape_)(cylinder5); // 5.999999999999999
	const volume1 = (volume_)(shape_)(cube1); // 1
	const volume2 = (volume_)(shape_)(cube2); // 8
	const volume3 = (volume_)(shape_)(cube3); // 1
	const volume4 = (volume_)(shape_)(cube4); // 8
	const volume5 = (volume_)(shape_)(cube5); // 1
	const volume6 = (volume_)(shape_)(sphere1); // 0.5235987755982988
	const volume7 = (volume_)(shape_)(sphere2); // 4.1887902047863905
	const volume8 = (volume_)(shape_)(sphere3); // 0.9999999999999997
	const volume9 = (volume_)(shape_)(sphere4); // 7.999999999999997
	const volume10 = (volume_)(shape_)(sphere5); // 1.3819765978853422
	const volume11 = (volume_)(shape_)(cylinder1); // 0.7853981633974483
	const volume12 = (volume_)(shape_)(cylinder2); // 6.283185307179586
	const volume13 = (volume_)(shape_)(cylinder3); // 1.0000000000000002
	const volume14 = (volume_)(shape_)(cylinder4); // 8.000000000000002
	const volume15 = (volume_)(shape_)(cylinder5); // 1.1283791670955123
	const invariant1 = (invariant_)(shape_)(cube1); // 0.004629629629629629
	const invariant2 = (invariant_)(shape_)(cube2); // 0.004629629629629629
	const invariant3 = (invariant_)(shape_)(cube3); // 0.004629629629629629
	const invariant4 = (invariant_)(shape_)(cube4); // 0.004629629629629629
	const invariant5 = (invariant_)(shape_)(cube5); // 0.004629629629629629
	const invariant6 = (invariant_)(shape_)(sphere1); // 0.008841941282883074
	const invariant7 = (invariant_)(shape_)(sphere2); // 0.008841941282883074
	const invariant8 = (invariant_)(shape_)(sphere3); // 0.008841941282883072
	const invariant9 = (invariant_)(shape_)(sphere4); // 0.008841941282883072
	const invariant10 = (invariant_)(shape_)(sphere5); // 0.008841941282883074
	const invariant11 = (invariant_)(shape_)(cylinder1); // 0.005894627521922049
	const invariant12 = (invariant_)(shape_)(cylinder2); // 0.0049735919716217296
	const invariant13 = (invariant_)(shape_)(cylinder3); // 0.005894627521922052
	const invariant14 = (invariant_)(shape_)(cylinder4); // 0.005894627521922052
	const invariant15 = (invariant_)(shape_)(cylinder5); // 0.005894627521922049
	////////////////////////////////////////////////////////////////////////////////////////
	// script n (V3):
	console.log('"' + label1 + '" === "cube of side 1": ' + (label1 === "cube of side 1"));
	console.log('"' + label2 + '" === "cube of side 2": ' + (label2 === "cube of side 2"));
	console.log('"' + label3 + '" === "cube of side 1": ' + (label3 === "cube of side 1"));
	console.log('"' + label4 + '" === "cube of side 2": ' + (label4 === "cube of side 2"));
	console.log('"' + label5 + '" === "cube of side 1": ' + (label5 === "cube of side 1"));
	console.log('"' + label6 + '" === "sphere of radius 0.5": ' + (label6 === "sphere of radius 0.5"));
	console.log('"' + label7 + '" === "sphere of radius 1": ' + (label7 === "sphere of radius 1"));
	console.log('"' + label8 + '" === "sphere of radius 0.6203504908994": ' + (label8 === "sphere of radius 0.6203504908994"));
	console.log('"' + label9 + '" === "sphere of radius 1.2407009817988": ' + (label9 === "sphere of radius 1.2407009817988"));
	console.log('"' + label10 + '" === "sphere of radius 0.690988298942671": ' + (label10 === "sphere of radius 0.690988298942671"));
	console.log('"' + label11 + '" === "cylinder of radius 0.5 and height 1": ' + (label11 === "cylinder of radius 0.5 and height 1"));
	console.log('"' + label12 + '" === "cylinder of radius 1 and height 2": ' + (label12 === "cylinder of radius 1 and height 2"));
	console.log('"' + label13 + '" === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781": ' + (label13 === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"));
	console.log('"' + label14 + '" === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562": ' + (label14 === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"));
	console.log('"' + label15 + '" === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126": ' + (label15 === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"));
	console.log(surface1 + ' === 6: ' + (surface1 === 6));
	console.log(surface2 + ' === 24: ' + (surface2 === 24));
	console.log(surface3 + ' === 6: ' + (surface3 === 6));
	console.log(surface4 + ' === 24: ' + (surface4 === 24));
	console.log(surface5 + ' === 6: ' + (surface5 === 6));
	console.log(surface6 + ' === 3.141592653589793: ' + (surface6 === 3.141592653589793));
	console.log(surface7 + ' === 12.566370614359172: ' + (surface7 === 12.566370614359172));
	console.log(surface8 + ' === 4.835975862049408: ' + (surface8 === 4.835975862049408));
	console.log(surface9 + ' === 19.343903448197633: ' + (surface9 === 19.343903448197633));
	console.log(surface10 + ' === 6.000000000000001: ' + (surface10 === 6.000000000000001));
	console.log(surface11 + ' === 4.71238898038469: ' + (surface11 === 4.71238898038469));
	console.log(surface12 + ' === 18.84955592153876: ' + (surface12 === 18.84955592153876));
	console.log(surface13 + ' === 5.535810445932086: ' + (surface13 === 5.535810445932086));
	console.log(surface14 + ' === 22.143241783728342: ' + (surface14 === 22.143241783728342));
	console.log(surface15 + ' === 5.999999999999999: ' + (surface15 === 5.999999999999999));
	console.log(volume1 + ' === 1: ' + (volume1 === 1));
	console.log(volume2 + ' === 8: ' + (volume2 === 8));
	console.log(volume3 + ' === 1: ' + (volume3 === 1));
	console.log(volume4 + ' === 8: ' + (volume4 === 8));
	console.log(volume5 + ' === 1: ' + (volume5 === 1));
	console.log(volume6 + ' === 0.5235987755982988: ' + (volume6 === 0.5235987755982988));
	console.log(volume7 + ' === 4.1887902047863905: ' + (volume7 === 4.1887902047863905));
	console.log(volume8 + ' === 0.9999999999999997: ' + (volume8 === 0.9999999999999997));
	console.log(volume9 + ' === 7.999999999999997: ' + (volume9 === 7.999999999999997));
	console.log(volume10 + ' === 1.3819765978853422: ' + (volume10 === 1.3819765978853422));
	console.log(volume11 + ' === 0.7853981633974483: ' + (volume11 === 0.7853981633974483));
	console.log(volume12 + ' === 6.283185307179586: ' + (volume12 === 6.283185307179586));
	console.log(volume13 + ' === 1.0000000000000002: ' + (volume13 === 1.0000000000000002));
	console.log(volume14 + ' === 8.000000000000002: ' + (volume14 === 8.000000000000002));
	console.log(volume15 + ' === 1.1283791670955123: ' + (volume15 === 1.1283791670955123));
	console.log(invariant1 + ' === 0.004629629629629629: ' + (invariant1 === 0.004629629629629629));
	console.log(invariant2 + ' === 0.004629629629629629: ' + (invariant2 === 0.004629629629629629));
	console.log(invariant3 + ' === 0.004629629629629629: ' + (invariant3 === 0.004629629629629629));
	console.log(invariant4 + ' === 0.004629629629629629: ' + (invariant4 === 0.004629629629629629));
	console.log(invariant5 + ' === 0.004629629629629629: ' + (invariant5 === 0.004629629629629629));
	console.log(invariant6 + ' === 0.008841941282883074: ' + (invariant6 === 0.008841941282883074));
	console.log(invariant7 + ' === 0.008841941282883074: ' + (invariant7 === 0.008841941282883074));
	console.log(invariant8 + ' === 0.008841941282883072: ' + (invariant8 === 0.008841941282883072));
	console.log(invariant9 + ' === 0.008841941282883072: ' + (invariant9 === 0.008841941282883072));
	console.log(invariant10 + ' === 0.008841941282883074: ' + (invariant10 === 0.008841941282883074));
	console.log(invariant11 + ' === 0.005894627521922049: ' + (invariant11 === 0.005894627521922049));
	console.log(invariant12 + ' === 0.005894627521922049: ' + (invariant12 === 0.005894627521922049));
	console.log(invariant13 + ' === 0.005894627521922052: ' + (invariant13 === 0.005894627521922052));
	console.log(invariant14 + ' === 0.005894627521922052: ' + (invariant14 === 0.005894627521922052));
	console.log(invariant15 + ' === 0.005894627521922049: ' + (invariant15 === 0.005894627521922049));
})();

console.log("delegations:");
(function(){
	////////////////////////////////////////////////////////////////////////////////////////
	// script a (V1):
	const shape_ = APPLICATION("shape_");
	const label_ = APPLICATION("label_");
	const surface_ = APPLICATION("surface_");
	const volume_ = APPLICATION("volume_");
	const stretch_ = APPLICATION("stretch_");
	const invariant_ = APPLICATION("invariant_");
	const shapeV1 = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, implementation => ((volume_)(shape_)(implementation) * (volume_)(shape_)(implementation)) / ((surface_)(shape_)(implementation) * (surface_)(shape_)(implementation) * (surface_)(shape_)(implementation))],
		])],
	]);
	////////////////////////////////////////////////////////////////////////////////////////
	// script b (V1):
	const cubeV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => side => `cube of side ${side}`],
			[surface_, implementation => side => side * side * 6],
			[volume_, implementation => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script c (V1):
	const sphereV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => radius => `sphere of radius ${radius}`],
			[surface_, implementation => radius => radius * radius * Math.PI * 4],
			[volume_, implementation => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script d (V2):
	const container_ = APPLICATION("container_");
	const shapeV2 = EXTENSION(shapeV1)(SPECIFICATION([
		[shape_, SPECIFICATION([
			[container_],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script e (V2):
	const cubeV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, side) => volume => cube(Math.pow(volume, 1/3))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script f (V2):
	const sphereV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, radius) => volume => sphere(Math.pow((3/4) * volume / Math.PI, 1/3))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script g (V2):
	const cylinderV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => (radius, height) => `cylinder of radius ${radius} and height ${height}`],
			[surface_, implementation => (radius, height) => radius * radius * Math.PI * 2 + height * radius * Math.PI * 2],
			[volume_, implementation => (radius, height) => height * radius * radius * Math.PI],
			[stretch_, implementation => (radius, height) => k => cylinder(radius * k, height * k)],
		])],
	]));
	const cylinderV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, radius, height) => volume => cylinder(Math.pow(4 * volume / Math.PI, 1/3) / 2, Math.pow(4 * volume / Math.PI, 1/3))],
		])],
	]), (definition, applications) => (delegation, radius, height) => applications(delegation)); // explicte standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script h (V3):
	const wrapper_ = APPLICATION("wrapper_");
	const shapeV3 = EXTENSION(shapeV2)(SPECIFICATION([
		[shape_, SPECIFICATION([
			[wrapper_],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script i (V3):
	const cubeV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, side) => surface => cube(Math.pow(surface / 6, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script j (V3):
	const sphereV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius) => surface => sphere(Math.pow((1/4) * surface / Math.PI, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script k (V3):
	const cylinderV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius, height) => surface => cylinder(Math.pow((1/6) * surface / Math.PI, 1/2), 2 * Math.pow((1/6) * surface / Math.PI, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script l (V3):
	const cube = (...values) => cubeV3(cubeV2(cubeV1(...values), ...values), ...values);
	const sphere = (...values) => sphereV3(sphereV2(sphereV1(...values), ...values), ...values);
	const cylinder = (...values) => cylinderV3(cylinderV2(cylinderV1(...values), ...values), ...values);
	////////////////////////////////////////////////////////////////////////////////////////
	// script m (V3):
	const cube1 = cube(1);
	const cube2 = (stretch_)(shape_)(cube1)(2);
	const cube3 = (container_)(shape_)(cube2)(1);
	const cube4 = (stretch_)(shape_)(cube3)(2);
	const cube5 = (wrapper_)(shape_)(cube4)(6);
	const sphere1 = sphere(0.5);
	const sphere2 = (stretch_)(shape_)(sphere1)(2);
	const sphere3 = (container_)(shape_)(sphere2)(1);
	const sphere4 = (stretch_)(shape_)(sphere3)(2);
	const sphere5 = (wrapper_)(shape_)(sphere4)(6);
	const cylinder1 = cylinder(0.5, 1);
	const cylinder2 = (stretch_)(shape_)(cylinder1)(2);
	const cylinder3 = (container_)(shape_)(cylinder2)(1);
	const cylinder4 = (stretch_)(shape_)(cylinder3)(2);
	const cylinder5 = (wrapper_)(shape_)(cylinder4)(6);
	const label1 = (label_)(shape_)(cube1); // "cube of side 1"
	const label2 = (label_)(shape_)(cube2); // "cube of side 2"
	const label3 = (label_)(shape_)(cube3); // "cube of side 1"
	const label4 = (label_)(shape_)(cube4); // "cube of side 2"
	const label5 = (label_)(shape_)(cube5); // "cube of side 1"
	const label6 = (label_)(shape_)(sphere1); // "sphere of radius 0.5"
	const label7 = (label_)(shape_)(sphere2); // "sphere of radius 1"
	const label8 = (label_)(shape_)(sphere3); // "sphere of radius 0.6203504908994"
	const label9 = (label_)(shape_)(sphere4); // "sphere of radius 1.2407009817988"
	const label10 = (label_)(shape_)(sphere5); // "sphere of radius 0.690988298942671"
	const label11 = (label_)(shape_)(cylinder1); // "cylinder of radius 0.5 and height 1"
	const label12 = (label_)(shape_)(cylinder2); // "cylinder of radius 1 and height 2"
	const label13 = (label_)(shape_)(cylinder3); // "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"
	const label14 = (label_)(shape_)(cylinder4); // "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"
	const label15 = (label_)(shape_)(cylinder5); // "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"
	const surface1 = (surface_)(shape_)(cube1); // 6
	const surface2 = (surface_)(shape_)(cube2); // 24
	const surface3 = (surface_)(shape_)(cube3); // 6
	const surface4 = (surface_)(shape_)(cube4); // 24
	const surface5 = (surface_)(shape_)(cube5); // 6
	const surface6 = (surface_)(shape_)(sphere1); // 3.141592653589793
	const surface7 = (surface_)(shape_)(sphere2); // 12.566370614359172
	const surface8 = (surface_)(shape_)(sphere3); // 4.835975862049408
	const surface9 = (surface_)(shape_)(sphere4); // 19.343903448197633
	const surface10 = (surface_)(shape_)(sphere5); // 6.000000000000001
	const surface11 = (surface_)(shape_)(cylinder1); // 4.71238898038469
	const surface12 = (surface_)(shape_)(cylinder2); // 18.84955592153876
	const surface13 = (surface_)(shape_)(cylinder3); // 5.535810445932086
	const surface14 = (surface_)(shape_)(cylinder4); // 22.143241783728342
	const surface15 = (surface_)(shape_)(cylinder5); // 5.999999999999999
	const volume1 = (volume_)(shape_)(cube1); // 1
	const volume2 = (volume_)(shape_)(cube2); // 8
	const volume3 = (volume_)(shape_)(cube3); // 1
	const volume4 = (volume_)(shape_)(cube4); // 8
	const volume5 = (volume_)(shape_)(cube5); // 1
	const volume6 = (volume_)(shape_)(sphere1); // 0.5235987755982988
	const volume7 = (volume_)(shape_)(sphere2); // 4.1887902047863905
	const volume8 = (volume_)(shape_)(sphere3); // 0.9999999999999997
	const volume9 = (volume_)(shape_)(sphere4); // 7.999999999999997
	const volume10 = (volume_)(shape_)(sphere5); // 1.3819765978853422
	const volume11 = (volume_)(shape_)(cylinder1); // 0.7853981633974483
	const volume12 = (volume_)(shape_)(cylinder2); // 6.283185307179586
	const volume13 = (volume_)(shape_)(cylinder3); // 1.0000000000000002
	const volume14 = (volume_)(shape_)(cylinder4); // 8.000000000000002
	const volume15 = (volume_)(shape_)(cylinder5); // 1.1283791670955123
	const invariant1 = (invariant_)(shape_)(cube1); // 0.004629629629629629
	const invariant2 = (invariant_)(shape_)(cube2); // 0.004629629629629629
	const invariant3 = (invariant_)(shape_)(cube3); // 0.004629629629629629
	const invariant4 = (invariant_)(shape_)(cube4); // 0.004629629629629629
	const invariant5 = (invariant_)(shape_)(cube5); // 0.004629629629629629
	const invariant6 = (invariant_)(shape_)(sphere1); // 0.008841941282883074
	const invariant7 = (invariant_)(shape_)(sphere2); // 0.008841941282883074
	const invariant8 = (invariant_)(shape_)(sphere3); // 0.008841941282883072
	const invariant9 = (invariant_)(shape_)(sphere4); // 0.008841941282883072
	const invariant10 = (invariant_)(shape_)(sphere5); // 0.008841941282883074
	const invariant11 = (invariant_)(shape_)(cylinder1); // 0.005894627521922049
	const invariant12 = (invariant_)(shape_)(cylinder2); // 0.0049735919716217296
	const invariant13 = (invariant_)(shape_)(cylinder3); // 0.005894627521922052
	const invariant14 = (invariant_)(shape_)(cylinder4); // 0.005894627521922052
	const invariant15 = (invariant_)(shape_)(cylinder5); // 0.005894627521922049
	////////////////////////////////////////////////////////////////////////////////////////
	// script n (V3):
	console.log('"' + label1 + '" === "cube of side 1": ' + (label1 === "cube of side 1"));
	console.log('"' + label2 + '" === "cube of side 2": ' + (label2 === "cube of side 2"));
	console.log('"' + label3 + '" === "cube of side 1": ' + (label3 === "cube of side 1"));
	console.log('"' + label4 + '" === "cube of side 2": ' + (label4 === "cube of side 2"));
	console.log('"' + label5 + '" === "cube of side 1": ' + (label5 === "cube of side 1"));
	console.log('"' + label6 + '" === "sphere of radius 0.5": ' + (label6 === "sphere of radius 0.5"));
	console.log('"' + label7 + '" === "sphere of radius 1": ' + (label7 === "sphere of radius 1"));
	console.log('"' + label8 + '" === "sphere of radius 0.6203504908994": ' + (label8 === "sphere of radius 0.6203504908994"));
	console.log('"' + label9 + '" === "sphere of radius 1.2407009817988": ' + (label9 === "sphere of radius 1.2407009817988"));
	console.log('"' + label10 + '" === "sphere of radius 0.690988298942671": ' + (label10 === "sphere of radius 0.690988298942671"));
	console.log('"' + label11 + '" === "cylinder of radius 0.5 and height 1": ' + (label11 === "cylinder of radius 0.5 and height 1"));
	console.log('"' + label12 + '" === "cylinder of radius 1 and height 2": ' + (label12 === "cylinder of radius 1 and height 2"));
	console.log('"' + label13 + '" === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781": ' + (label13 === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"));
	console.log('"' + label14 + '" === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562": ' + (label14 === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"));
	console.log('"' + label15 + '" === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126": ' + (label15 === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"));
	console.log(surface1 + ' === 6: ' + (surface1 === 6));
	console.log(surface2 + ' === 24: ' + (surface2 === 24));
	console.log(surface3 + ' === 6: ' + (surface3 === 6));
	console.log(surface4 + ' === 24: ' + (surface4 === 24));
	console.log(surface5 + ' === 6: ' + (surface5 === 6));
	console.log(surface6 + ' === 3.141592653589793: ' + (surface6 === 3.141592653589793));
	console.log(surface7 + ' === 12.566370614359172: ' + (surface7 === 12.566370614359172));
	console.log(surface8 + ' === 4.835975862049408: ' + (surface8 === 4.835975862049408));
	console.log(surface9 + ' === 19.343903448197633: ' + (surface9 === 19.343903448197633));
	console.log(surface10 + ' === 6.000000000000001: ' + (surface10 === 6.000000000000001));
	console.log(surface11 + ' === 4.71238898038469: ' + (surface11 === 4.71238898038469));
	console.log(surface12 + ' === 18.84955592153876: ' + (surface12 === 18.84955592153876));
	console.log(surface13 + ' === 5.535810445932086: ' + (surface13 === 5.535810445932086));
	console.log(surface14 + ' === 22.143241783728342: ' + (surface14 === 22.143241783728342));
	console.log(surface15 + ' === 5.999999999999999: ' + (surface15 === 5.999999999999999));
	console.log(volume1 + ' === 1: ' + (volume1 === 1));
	console.log(volume2 + ' === 8: ' + (volume2 === 8));
	console.log(volume3 + ' === 1: ' + (volume3 === 1));
	console.log(volume4 + ' === 8: ' + (volume4 === 8));
	console.log(volume5 + ' === 1: ' + (volume5 === 1));
	console.log(volume6 + ' === 0.5235987755982988: ' + (volume6 === 0.5235987755982988));
	console.log(volume7 + ' === 4.1887902047863905: ' + (volume7 === 4.1887902047863905));
	console.log(volume8 + ' === 0.9999999999999997: ' + (volume8 === 0.9999999999999997));
	console.log(volume9 + ' === 7.999999999999997: ' + (volume9 === 7.999999999999997));
	console.log(volume10 + ' === 1.3819765978853422: ' + (volume10 === 1.3819765978853422));
	console.log(volume11 + ' === 0.7853981633974483: ' + (volume11 === 0.7853981633974483));
	console.log(volume12 + ' === 6.283185307179586: ' + (volume12 === 6.283185307179586));
	console.log(volume13 + ' === 1.0000000000000002: ' + (volume13 === 1.0000000000000002));
	console.log(volume14 + ' === 8.000000000000002: ' + (volume14 === 8.000000000000002));
	console.log(volume15 + ' === 1.1283791670955123: ' + (volume15 === 1.1283791670955123));
	console.log(invariant1 + ' === 0.004629629629629629: ' + (invariant1 === 0.004629629629629629));
	console.log(invariant2 + ' === 0.004629629629629629: ' + (invariant2 === 0.004629629629629629));
	console.log(invariant3 + ' === 0.004629629629629629: ' + (invariant3 === 0.004629629629629629));
	console.log(invariant4 + ' === 0.004629629629629629: ' + (invariant4 === 0.004629629629629629));
	console.log(invariant5 + ' === 0.004629629629629629: ' + (invariant5 === 0.004629629629629629));
	console.log(invariant6 + ' === 0.008841941282883074: ' + (invariant6 === 0.008841941282883074));
	console.log(invariant7 + ' === 0.008841941282883074: ' + (invariant7 === 0.008841941282883074));
	console.log(invariant8 + ' === 0.008841941282883072: ' + (invariant8 === 0.008841941282883072));
	console.log(invariant9 + ' === 0.008841941282883072: ' + (invariant9 === 0.008841941282883072));
	console.log(invariant10 + ' === 0.008841941282883074: ' + (invariant10 === 0.008841941282883074));
	console.log(invariant11 + ' === 0.005894627521922049: ' + (invariant11 === 0.005894627521922049));
	console.log(invariant12 + ' === 0.005894627521922049: ' + (invariant12 === 0.005894627521922049));
	console.log(invariant13 + ' === 0.005894627521922052: ' + (invariant13 === 0.005894627521922052));
	console.log(invariant14 + ' === 0.005894627521922052: ' + (invariant14 === 0.005894627521922052));
	console.log(invariant15 + ' === 0.005894627521922049: ' + (invariant15 === 0.005894627521922049));
})();
(function(){
	////////////////////////////////////////////////////////////////////////////////////////
	// script a (V1):
	const shape_ = APPLICATION("shape_");
	const label_ = APPLICATION("label_");
	const surface_ = APPLICATION("surface_");
	const volume_ = APPLICATION("volume_");
	const stretch_ = APPLICATION("stretch_");
	const invariant_ = APPLICATION("invariant_");
	const shapeV1 = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, implementation => ((volume_)(shape_)(implementation) * (volume_)(shape_)(implementation)) / ((surface_)(shape_)(implementation) * (surface_)(shape_)(implementation) * (surface_)(shape_)(implementation))],
		])],
	]);
	////////////////////////////////////////////////////////////////////////////////////////
	// script b (V1):
	const cubeV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => side => `cube of side ${side}`],
			[surface_, implementation => side => side * side * 6],
			[volume_, implementation => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script c (V1):
	const sphereV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => radius => `sphere of radius ${radius}`],
			[surface_, implementation => radius => radius * radius * Math.PI * 4],
			[volume_, implementation => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
		])],
	]));
	////////////////////////////////////////////////////////////////////////////////////////
	// script d (V2):
	const container_ = APPLICATION("container_");
	const shapeV2 = undefined; // no specification check
	////////////////////////////////////////////////////////////////////////////////////////
	// script e (V2):
	const cubeV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, side) => volume => cube(Math.pow(volume, 1/3))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script f (V2):
	const sphereV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, radius) => volume => sphere(Math.pow((3/4) * volume / Math.PI, 1/3))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script g (V2):
	const cylinderV1 = DECLARATION(shapeV1, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, implementation => (radius, height) => `cylinder of radius ${radius} and height ${height}`],
			[surface_, implementation => (radius, height) => radius * radius * Math.PI * 2 + height * radius * Math.PI * 2],
			[volume_, implementation => (radius, height) => height * radius * radius * Math.PI],
			[stretch_, implementation => (radius, height) => k => cylinder(radius * k, height * k)],
		])],
	]));
	const cylinderV2 = DECLARATION(shapeV2, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[container_, definition => (delegation, radius, height) => volume => cylinder(Math.pow(4 * volume / Math.PI, 1/3) / 2, Math.pow(4 * volume / Math.PI, 1/3))],
		])],
	]), (definition, applications) => (delegation, radius, height) => applications(delegation)); // explicte standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script h (V3):
	const wrapper_ = APPLICATION("wrapper_");
	const shapeV3 = undefined; // no specification check
	////////////////////////////////////////////////////////////////////////////////////////
	// script i (V3):
	const cubeV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, side) => surface => cube(Math.pow(surface / 6, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script j (V3):
	const sphereV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius) => surface => sphere(Math.pow((1/4) * surface / Math.PI, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script k (V3):
	const cylinderV3 = DECLARATION(shapeV3, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[wrapper_, definition => (delegation, radius, height) => surface => cylinder(Math.pow((1/6) * surface / Math.PI, 1/2), 2 * Math.pow((1/6) * surface / Math.PI, 1/2))],
		])],
	]), true); // standard delegation
	////////////////////////////////////////////////////////////////////////////////////////
	// script l (V3):
	const cube = (...values) => cubeV3(cubeV2(cubeV1(...values), ...values), ...values);
	const sphere = (...values) => sphereV3(sphereV2(sphereV1(...values), ...values), ...values);
	const cylinder = (...values) => cylinderV3(cylinderV2(cylinderV1(...values), ...values), ...values);
	////////////////////////////////////////////////////////////////////////////////////////
	// script m (V3):
	const cube1 = cube(1);
	const cube2 = (stretch_)(shape_)(cube1)(2);
	const cube3 = (container_)(shape_)(cube2)(1);
	const cube4 = (stretch_)(shape_)(cube3)(2);
	const cube5 = (wrapper_)(shape_)(cube4)(6);
	const sphere1 = sphere(0.5);
	const sphere2 = (stretch_)(shape_)(sphere1)(2);
	const sphere3 = (container_)(shape_)(sphere2)(1);
	const sphere4 = (stretch_)(shape_)(sphere3)(2);
	const sphere5 = (wrapper_)(shape_)(sphere4)(6);
	const cylinder1 = cylinder(0.5, 1);
	const cylinder2 = (stretch_)(shape_)(cylinder1)(2);
	const cylinder3 = (container_)(shape_)(cylinder2)(1);
	const cylinder4 = (stretch_)(shape_)(cylinder3)(2);
	const cylinder5 = (wrapper_)(shape_)(cylinder4)(6);
	const label1 = (label_)(shape_)(cube1); // "cube of side 1"
	const label2 = (label_)(shape_)(cube2); // "cube of side 2"
	const label3 = (label_)(shape_)(cube3); // "cube of side 1"
	const label4 = (label_)(shape_)(cube4); // "cube of side 2"
	const label5 = (label_)(shape_)(cube5); // "cube of side 1"
	const label6 = (label_)(shape_)(sphere1); // "sphere of radius 0.5"
	const label7 = (label_)(shape_)(sphere2); // "sphere of radius 1"
	const label8 = (label_)(shape_)(sphere3); // "sphere of radius 0.6203504908994"
	const label9 = (label_)(shape_)(sphere4); // "sphere of radius 1.2407009817988"
	const label10 = (label_)(shape_)(sphere5); // "sphere of radius 0.690988298942671"
	const label11 = (label_)(shape_)(cylinder1); // "cylinder of radius 0.5 and height 1"
	const label12 = (label_)(shape_)(cylinder2); // "cylinder of radius 1 and height 2"
	const label13 = (label_)(shape_)(cylinder3); // "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"
	const label14 = (label_)(shape_)(cylinder4); // "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"
	const label15 = (label_)(shape_)(cylinder5); // "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"
	const surface1 = (surface_)(shape_)(cube1); // 6
	const surface2 = (surface_)(shape_)(cube2); // 24
	const surface3 = (surface_)(shape_)(cube3); // 6
	const surface4 = (surface_)(shape_)(cube4); // 24
	const surface5 = (surface_)(shape_)(cube5); // 6
	const surface6 = (surface_)(shape_)(sphere1); // 3.141592653589793
	const surface7 = (surface_)(shape_)(sphere2); // 12.566370614359172
	const surface8 = (surface_)(shape_)(sphere3); // 4.835975862049408
	const surface9 = (surface_)(shape_)(sphere4); // 19.343903448197633
	const surface10 = (surface_)(shape_)(sphere5); // 6.000000000000001
	const surface11 = (surface_)(shape_)(cylinder1); // 4.71238898038469
	const surface12 = (surface_)(shape_)(cylinder2); // 18.84955592153876
	const surface13 = (surface_)(shape_)(cylinder3); // 5.535810445932086
	const surface14 = (surface_)(shape_)(cylinder4); // 22.143241783728342
	const surface15 = (surface_)(shape_)(cylinder5); // 5.999999999999999
	const volume1 = (volume_)(shape_)(cube1); // 1
	const volume2 = (volume_)(shape_)(cube2); // 8
	const volume3 = (volume_)(shape_)(cube3); // 1
	const volume4 = (volume_)(shape_)(cube4); // 8
	const volume5 = (volume_)(shape_)(cube5); // 1
	const volume6 = (volume_)(shape_)(sphere1); // 0.5235987755982988
	const volume7 = (volume_)(shape_)(sphere2); // 4.1887902047863905
	const volume8 = (volume_)(shape_)(sphere3); // 0.9999999999999997
	const volume9 = (volume_)(shape_)(sphere4); // 7.999999999999997
	const volume10 = (volume_)(shape_)(sphere5); // 1.3819765978853422
	const volume11 = (volume_)(shape_)(cylinder1); // 0.7853981633974483
	const volume12 = (volume_)(shape_)(cylinder2); // 6.283185307179586
	const volume13 = (volume_)(shape_)(cylinder3); // 1.0000000000000002
	const volume14 = (volume_)(shape_)(cylinder4); // 8.000000000000002
	const volume15 = (volume_)(shape_)(cylinder5); // 1.1283791670955123
	const invariant1 = (invariant_)(shape_)(cube1); // 0.004629629629629629
	const invariant2 = (invariant_)(shape_)(cube2); // 0.004629629629629629
	const invariant3 = (invariant_)(shape_)(cube3); // 0.004629629629629629
	const invariant4 = (invariant_)(shape_)(cube4); // 0.004629629629629629
	const invariant5 = (invariant_)(shape_)(cube5); // 0.004629629629629629
	const invariant6 = (invariant_)(shape_)(sphere1); // 0.008841941282883074
	const invariant7 = (invariant_)(shape_)(sphere2); // 0.008841941282883074
	const invariant8 = (invariant_)(shape_)(sphere3); // 0.008841941282883072
	const invariant9 = (invariant_)(shape_)(sphere4); // 0.008841941282883072
	const invariant10 = (invariant_)(shape_)(sphere5); // 0.008841941282883074
	const invariant11 = (invariant_)(shape_)(cylinder1); // 0.005894627521922049
	const invariant12 = (invariant_)(shape_)(cylinder2); // 0.0049735919716217296
	const invariant13 = (invariant_)(shape_)(cylinder3); // 0.005894627521922052
	const invariant14 = (invariant_)(shape_)(cylinder4); // 0.005894627521922052
	const invariant15 = (invariant_)(shape_)(cylinder5); // 0.005894627521922049
	////////////////////////////////////////////////////////////////////////////////////////
	// script n (V3):
	console.log('"' + label1 + '" === "cube of side 1": ' + (label1 === "cube of side 1"));
	console.log('"' + label2 + '" === "cube of side 2": ' + (label2 === "cube of side 2"));
	console.log('"' + label3 + '" === "cube of side 1": ' + (label3 === "cube of side 1"));
	console.log('"' + label4 + '" === "cube of side 2": ' + (label4 === "cube of side 2"));
	console.log('"' + label5 + '" === "cube of side 1": ' + (label5 === "cube of side 1"));
	console.log('"' + label6 + '" === "sphere of radius 0.5": ' + (label6 === "sphere of radius 0.5"));
	console.log('"' + label7 + '" === "sphere of radius 1": ' + (label7 === "sphere of radius 1"));
	console.log('"' + label8 + '" === "sphere of radius 0.6203504908994": ' + (label8 === "sphere of radius 0.6203504908994"));
	console.log('"' + label9 + '" === "sphere of radius 1.2407009817988": ' + (label9 === "sphere of radius 1.2407009817988"));
	console.log('"' + label10 + '" === "sphere of radius 0.690988298942671": ' + (label10 === "sphere of radius 0.690988298942671"));
	console.log('"' + label11 + '" === "cylinder of radius 0.5 and height 1": ' + (label11 === "cylinder of radius 0.5 and height 1"));
	console.log('"' + label12 + '" === "cylinder of radius 1 and height 2": ' + (label12 === "cylinder of radius 1 and height 2"));
	console.log('"' + label13 + '" === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781": ' + (label13 === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"));
	console.log('"' + label14 + '" === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562": ' + (label14 === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"));
	console.log('"' + label15 + '" === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126": ' + (label15 === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"));
	console.log(surface1 + ' === 6: ' + (surface1 === 6));
	console.log(surface2 + ' === 24: ' + (surface2 === 24));
	console.log(surface3 + ' === 6: ' + (surface3 === 6));
	console.log(surface4 + ' === 24: ' + (surface4 === 24));
	console.log(surface5 + ' === 6: ' + (surface5 === 6));
	console.log(surface6 + ' === 3.141592653589793: ' + (surface6 === 3.141592653589793));
	console.log(surface7 + ' === 12.566370614359172: ' + (surface7 === 12.566370614359172));
	console.log(surface8 + ' === 4.835975862049408: ' + (surface8 === 4.835975862049408));
	console.log(surface9 + ' === 19.343903448197633: ' + (surface9 === 19.343903448197633));
	console.log(surface10 + ' === 6.000000000000001: ' + (surface10 === 6.000000000000001));
	console.log(surface11 + ' === 4.71238898038469: ' + (surface11 === 4.71238898038469));
	console.log(surface12 + ' === 18.84955592153876: ' + (surface12 === 18.84955592153876));
	console.log(surface13 + ' === 5.535810445932086: ' + (surface13 === 5.535810445932086));
	console.log(surface14 + ' === 22.143241783728342: ' + (surface14 === 22.143241783728342));
	console.log(surface15 + ' === 5.999999999999999: ' + (surface15 === 5.999999999999999));
	console.log(volume1 + ' === 1: ' + (volume1 === 1));
	console.log(volume2 + ' === 8: ' + (volume2 === 8));
	console.log(volume3 + ' === 1: ' + (volume3 === 1));
	console.log(volume4 + ' === 8: ' + (volume4 === 8));
	console.log(volume5 + ' === 1: ' + (volume5 === 1));
	console.log(volume6 + ' === 0.5235987755982988: ' + (volume6 === 0.5235987755982988));
	console.log(volume7 + ' === 4.1887902047863905: ' + (volume7 === 4.1887902047863905));
	console.log(volume8 + ' === 0.9999999999999997: ' + (volume8 === 0.9999999999999997));
	console.log(volume9 + ' === 7.999999999999997: ' + (volume9 === 7.999999999999997));
	console.log(volume10 + ' === 1.3819765978853422: ' + (volume10 === 1.3819765978853422));
	console.log(volume11 + ' === 0.7853981633974483: ' + (volume11 === 0.7853981633974483));
	console.log(volume12 + ' === 6.283185307179586: ' + (volume12 === 6.283185307179586));
	console.log(volume13 + ' === 1.0000000000000002: ' + (volume13 === 1.0000000000000002));
	console.log(volume14 + ' === 8.000000000000002: ' + (volume14 === 8.000000000000002));
	console.log(volume15 + ' === 1.1283791670955123: ' + (volume15 === 1.1283791670955123));
	console.log(invariant1 + ' === 0.004629629629629629: ' + (invariant1 === 0.004629629629629629));
	console.log(invariant2 + ' === 0.004629629629629629: ' + (invariant2 === 0.004629629629629629));
	console.log(invariant3 + ' === 0.004629629629629629: ' + (invariant3 === 0.004629629629629629));
	console.log(invariant4 + ' === 0.004629629629629629: ' + (invariant4 === 0.004629629629629629));
	console.log(invariant5 + ' === 0.004629629629629629: ' + (invariant5 === 0.004629629629629629));
	console.log(invariant6 + ' === 0.008841941282883074: ' + (invariant6 === 0.008841941282883074));
	console.log(invariant7 + ' === 0.008841941282883074: ' + (invariant7 === 0.008841941282883074));
	console.log(invariant8 + ' === 0.008841941282883072: ' + (invariant8 === 0.008841941282883072));
	console.log(invariant9 + ' === 0.008841941282883072: ' + (invariant9 === 0.008841941282883072));
	console.log(invariant10 + ' === 0.008841941282883074: ' + (invariant10 === 0.008841941282883074));
	console.log(invariant11 + ' === 0.005894627521922049: ' + (invariant11 === 0.005894627521922049));
	console.log(invariant12 + ' === 0.005894627521922049: ' + (invariant12 === 0.005894627521922049));
	console.log(invariant13 + ' === 0.005894627521922052: ' + (invariant13 === 0.005894627521922052));
	console.log(invariant14 + ' === 0.005894627521922052: ' + (invariant14 === 0.005894627521922052));
	console.log(invariant15 + ' === 0.005894627521922049: ' + (invariant15 === 0.005894627521922049));
})();

console.log("exceptions:");
(function(){
	const shape_ = APPLICATION("shape_");
	const label_ = APPLICATION("label_");
	const surface_ = APPLICATION("surface_");
	const volume_ = APPLICATION("volume_");
	const stretch_ = APPLICATION("stretch_");
	const invariant_ = APPLICATION("invariant_");
	const alignment_ = APPLICATION("alignment_");
	const solid_ = APPLICATION("solid_");
	const weight_ = APPLICATION("weight_");
	const test_ = APPLICATION("test_");
	const cube = DECLARATION(SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_],
			[alignment_],
		])],
	]), IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => side => `cube of side ${side}`],
			[surface_, definition => side => side * side * 6],
			[volume_, definition => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
			[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
		])],
	]));
	const cube1 = cube(1);

	try{
		(stretch_)(shape_)(solid_)(cube1);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "unexpected applications: (solid_)": ' + (exception === "unexpected applications: (solid_)"));
	}

	try{
		(solid_)(stretch_)(shape_)(cube1);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "applications applied to an invalid definition or invalid application: (solid_)": ' + (exception === "applications applied to an invalid definition or invalid application: (solid_)"));
	}

	try{
		(weight_)(cube1);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "unexpected applications: (weight_)": ' + (exception === "unexpected applications: (weight_)"));
	}

	try{
		(solid_)(cube1);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "unexpected applications: (solid_)": ' + (exception === "unexpected applications: (solid_)"));
	}

	try{
		(shape_)(x => 2 * x);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "applications applied to an invalid definition or invalid application: (shape_)": ' + (exception === "applications applied to an invalid definition or invalid application: (shape_)"));
	}

	try{
		(shape_)(2);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "applications applied to an invalid definition or invalid application: (shape_)": ' + (exception === "applications applied to an invalid definition or invalid application: (shape_)"));
	}

	try{
		(label_)(shape_)(1234);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "applications applied to an invalid definition or invalid application: (label_)(shape_)": ' + (exception === "applications applied to an invalid definition or invalid application: (label_)(shape_)"));
	}

	try{
		(label_)(shape_)(x => 1234);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "applications applied to an invalid definition or invalid application: (label_)(shape_)": ' + (exception === "applications applied to an invalid definition or invalid application: (label_)(shape_)"));
	}

	try{
		const cube = DECLARATION([
			[shape_, [
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_, definition => (volume_(definition) * volume_(definition)) / (surface_(definition) * surface_(definition) * surface_(definition))],
				[alignment_],
			]],
			[solid_, [
				[label_],
				[weight_],
				[alignment_],
				[test_],
			]],
		], IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
				[volume_, definition => side => side * side * side],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "invalid specification": ' + (exception === "invalid specification"));
	}

	try{
		const cube = DECLARATION(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_, definition => (volume_(definition) * volume_(definition)) / (surface_(definition) * surface_(definition) * surface_(definition))],
				[alignment_],
			])],
			[solid_, SPECIFICATION([
				[label_],
				[weight_],
				[alignment_],
				[test_],
			])],
		]), [
			[shape_, [
				[label_, definition => side => `cube of side ${side}`],
				[volume_, definition => side => side * side * side],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			]],
		]);
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "invalid implementation": ' + (exception === "invalid implementation"));
	}

	try{
		const cube = DECLARATION(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_, definition => (volume_(definition) * volume_(definition)) / (surface_(definition) * surface_(definition) * surface_(definition))],
				[alignment_],
			])],
			[solid_, SPECIFICATION([
				[label_],
				[weight_],
				[alignment_],
				[test_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
				[volume_, definition => side => side * side * side],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "missing implementation: (solid_)(label_)": ' + (exception === "missing implementation: (solid_)(label_)"));
	}

	try{
		const cube = DECLARATION(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_, definition => (volume_(definition) * volume_(definition)) / (surface_(definition) * surface_(definition) * surface_(definition))],
			])],
			[solid_, SPECIFICATION([
				[label_],
				[weight_],
				[alignment_],
				[test_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
				[surface_, definition => side => side * side * 6],
				[volume_, definition => side => side * side * side],
				[stretch_, definition => side => k => cube(side * k)],
				[invariant_, definition => side => 1],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "unexpected implementation: (shape_)(invariant_)": ' + (exception === "unexpected implementation: (shape_)(invariant_)"));
	}

	try{
		const cube = DECLARATION(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_],
				[alignment_],
			])],
			[solid_, SPECIFICATION([
				[label_],
				[weight_],
				[alignment_],
				[test_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
				[surface_, definition => side => side * side * 6],
				[volume_, definition => side => side * side * side],
				[stretch_, definition => side => k => cube(side * k)],
				[invariant_],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "missing implementation: (shape_)(invariant_)": ' + (exception === "missing implementation: (shape_)(invariant_)"));
	}

	try{
		const cube = DECLARATION(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
				[surface_],
				[volume_],
				[stretch_],
				[invariant_],
				[alignment_],
			])],
			[solid_, SPECIFICATION([
				[label_],
				[weight_],
				[alignment_],
				[test_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
				[surface_, definition => side => side * side * 6],
				[volume_, definition => side => side * side * side],
				[stretch_, definition => side => k => cube(side * k)],
				[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "missing implementation: (solid_)(label_)": ' + (exception === "missing implementation: (solid_)(label_)"));
	}

	try{
		const cubex = EXTENSION(cube)(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "extension specification duplication: (shape_)(label_)": ' + (exception === "extension specification duplication: (shape_)(label_)"));
	}

	try{
		const cubex = EXTENSION(cube)(SPECIFICATION([
			[shape_, SPECIFICATION([
				[label_],
			])],
		]), IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
			])],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "extension specification duplication: (shape_)(label_)": ' + (exception === "extension specification duplication: (shape_)(label_)"));
	}

	try{
		const cubex = DECLARATION(EXTENSION(cube)(SPECIFICATION([
			[shape_, SPECIFICATION([
			])],
		])), EXTENSION(cube)(IMPLEMENTATION([
			[shape_, IMPLEMENTATION([
				[label_, definition => side => `cube of side ${side}`],
			])],
		])));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "extension implementation duplication: (shape_)(label_)": ' + (exception === "extension implementation duplication: (shape_)(label_)"));
	}

	try{
		const cubex = EXTENSION(cube)(SPECIFICATION([
			[shape_],
		]), IMPLEMENTATION([
			[shape_, definition => side => `cube of side ${side}`],
		]));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "extension specification duplication: (shape_)": ' + (exception === "extension specification duplication: (shape_)"));
	}

	try{
		const cubex = DECLARATION(EXTENSION(cube)(SPECIFICATION([
			[solid_, SPECIFICATION([
				[weight_],
			])],
		])), EXTENSION(cube)(IMPLEMENTATION([
			[solid_],
		])));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "unexpected implementation: (solid_)": ' + (exception === "unexpected implementation: (solid_)"));
	}

	try{
		const cubex = DECLARATION(undefined, EXTENSION(cube)(IMPLEMENTATION([
			[solid_],
		])));
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception + '" === "invalid specification": ' + (exception === "invalid specification"));
	}

	try{
		(function(){
			////////////////////////////////////////////////////////////////////////////////////////
			// script a (V1):
			const shape_ = APPLICATION("shape_");
			const label_ = APPLICATION("label_");
			const surface_ = APPLICATION("surface_");
			const volume_ = APPLICATION("volume_");
			const stretch_ = APPLICATION("stretch_");
			const invariant_ = APPLICATION("invariant_");
			const shapeV1 = SPECIFICATION([
				[shape_, SPECIFICATION([
					[label_],
					[surface_],
					[volume_],
					[stretch_],
					[invariant_, implementation => ((volume_)(shape_)(implementation) * (volume_)(shape_)(implementation)) / ((surface_)(shape_)(implementation) * (surface_)(shape_)(implementation) * (surface_)(shape_)(implementation))],
				])],
			]);
			////////////////////////////////////////////////////////////////////////////////////////
			// script b (V1):
			const cubeV1 = DECLARATION(shapeV1, IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[label_, implementation => side => `cube of side ${side}`],
					[surface_, implementation => side => side * side * 6],
					[volume_, implementation => side => side * side * side],
					[stretch_, definition => side => k => cube(side * k)],
				])],
			]));
			////////////////////////////////////////////////////////////////////////////////////////
			// script c (V1):
			const sphereV1 = DECLARATION(shapeV1, IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[label_, implementation => radius => `sphere of radius ${radius}`],
					[surface_, implementation => radius => radius * radius * Math.PI * 4],
					[volume_, implementation => radius => radius * radius * radius * Math.PI * 4/3],
					[stretch_, definition => radius => k => sphere(radius * k)],
				])],
			]));
			////////////////////////////////////////////////////////////////////////////////////////
			// script d (V2):
			const container_ = APPLICATION("container_");
			const shapeV2 = EXTENSION(shapeV1)(SPECIFICATION([
				[shape_, SPECIFICATION([
					[container_],
				])],
			]));
			////////////////////////////////////////////////////////////////////////////////////////
			// script e (V2):
			const cubeV2 = DECLARATION(shapeV2, EXTENSION(cubeV1)(IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[container_, definition => side => volume => cube(Math.pow(volume, 1/3))],
				])],
			])));
			////////////////////////////////////////////////////////////////////////////////////////
			// script f (V2):
			const sphereV2 = DECLARATION(shapeV2, EXTENSION(sphereV1)(IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[container_, definition => radius => volume => sphere(Math.pow((3/4) * volume / Math.PI, 1/3))],
				])],
			])));
			////////////////////////////////////////////////////////////////////////////////////////
			// script g (V2):
			const cylinderV2 = DECLARATION(shapeV2, IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[label_, implementation => (radius, height) => `cylinder of radius ${radius} and height ${height}`],
					[surface_, implementation => (radius, height) => radius * radius * Math.PI * 2 + height * radius * Math.PI * 2],
					[volume_, implementation => (radius, height) => height * radius * radius * Math.PI],
					[stretch_, implementation => (radius, height) => k => cylinder(radius * k, height * k)],
					[container_, definition => (radius, height) => volume => cylinder(Math.pow(4 * volume / Math.PI, 1/3) / 2, Math.pow(4 * volume / Math.PI, 1/3))],
				])],
			]));
			////////////////////////////////////////////////////////////////////////////////////////
			// script h (V3):
			const wrapper_ = APPLICATION("wrapper_");
			const shapeV3 = EXTENSION(shapeV2)(SPECIFICATION([
				[shape_, SPECIFICATION([
					[wrapper_],
				])],
			]));
			////////////////////////////////////////////////////////////////////////////////////////
			// script i (V3):
			const cubeV3 = DECLARATION(shapeV3, EXTENSION(cubeV2)(IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[wrapper_, definition => (delegation, side) => surface => cube(Math.pow(surface / 6, 1/2))],
				])],
			])));
			////////////////////////////////////////////////////////////////////////////////////////
			// script j (V3):
			const sphereV3 = DECLARATION(shapeV3, EXTENSION(sphereV2)(IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[wrapper_, definition => (delegation, radius) => surface => sphere(Math.pow((1/4) * surface / Math.PI, 1/2))],
				])],
			])));
			////////////////////////////////////////////////////////////////////////////////////////
			// script k (V3):
			const cylinderV3 = DECLARATION(shapeV3, EXTENSION(cylinderV2)(IMPLEMENTATION([
				[shape_, IMPLEMENTATION([
					[wrapper_, definition => (delegation, radius, height) => surface => cylinder(Math.pow((1/6) * surface / Math.PI, 1/2), 2 * Math.pow((1/6) * surface / Math.PI, 1/2))],
				])],
			])), true);
			////////////////////////////////////////////////////////////////////////////////////////
			// script l (V3):
			const cube = cubeV3;
			// missing declaration // const sphere = sphereV3;
			const cylinder = cylinderV3;
			////////////////////////////////////////////////////////////////////////////////////////
			// script m (V3):
			const cube1 = cube(1);
			const cube2 = (stretch_)(shape_)(cube1)(2);
			const cube3 = (container_)(shape_)(cube2)(1);
			const cube4 = (stretch_)(shape_)(cube3)(2);
			const cube5 = (wrapper_)(shape_)(cube4)(6);
			const sphere1 = sphere(0.5);
			const sphere2 = (stretch_)(shape_)(sphere1)(2);
			const sphere3 = (container_)(shape_)(sphere2)(1);
			const sphere4 = (stretch_)(shape_)(sphere3)(2);
			const sphere5 = (wrapper_)(shape_)(sphere4)(6);
			const cylinder1 = cylinder(0.5, 1);
			const cylinder2 = (stretch_)(shape_)(cylinder1)(2);
			const cylinder3 = (container_)(shape_)(cylinder2)(1);
			const cylinder4 = (stretch_)(shape_)(cylinder3)(2);
			const cylinder5 = (wrapper_)(shape_)(cylinder4)(6);
			const label1 = (label_)(shape_)(cube1); // "cube of side 1"
			const label2 = (label_)(shape_)(cube2); // "cube of side 2"
			const label3 = (label_)(shape_)(cube3); // "cube of side 1"
			const label4 = (label_)(shape_)(cube4); // "cube of side 2"
			const label5 = (label_)(shape_)(cube5); // "cube of side 1"
			const label6 = (label_)(shape_)(sphere1); // "sphere of radius 0.5"
			const label7 = (label_)(shape_)(sphere2); // "sphere of radius 1"
			const label8 = (label_)(shape_)(sphere3); // "sphere of radius 0.6203504908994"
			const label9 = (label_)(shape_)(sphere4); // "sphere of radius 1.2407009817988"
			const label10 = (label_)(shape_)(sphere5); // "sphere of radius 0.690988298942671"
			const label11 = (label_)(shape_)(cylinder1); // "cylinder of radius 0.5 and height 1"
			const label12 = (label_)(shape_)(cylinder2); // "cylinder of radius 1 and height 2"
			const label13 = (label_)(shape_)(cylinder3); // "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"
			const label14 = (label_)(shape_)(cylinder4); // "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"
			const label15 = (label_)(shape_)(cylinder5); // "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"
			const surface1 = (surface_)(shape_)(cube1); // 6
			const surface2 = (surface_)(shape_)(cube2); // 24
			const surface3 = (surface_)(shape_)(cube3); // 6
			const surface4 = (surface_)(shape_)(cube4); // 24
			const surface5 = (surface_)(shape_)(cube5); // 6
			const surface6 = (surface_)(shape_)(sphere1); // 3.141592653589793
			const surface7 = (surface_)(shape_)(sphere2); // 12.566370614359172
			const surface8 = (surface_)(shape_)(sphere3); // 4.835975862049408
			const surface9 = (surface_)(shape_)(sphere4); // 19.343903448197633
			const surface10 = (surface_)(shape_)(sphere5); // 6.000000000000001
			const surface11 = (surface_)(shape_)(cylinder1); // 4.71238898038469
			const surface12 = (surface_)(shape_)(cylinder2); // 18.84955592153876
			const surface13 = (surface_)(shape_)(cylinder3); // 5.535810445932086
			const surface14 = (surface_)(shape_)(cylinder4); // 22.143241783728342
			const surface15 = (surface_)(shape_)(cylinder5); // 5.999999999999999
			const volume1 = (volume_)(shape_)(cube1); // 1
			const volume2 = (volume_)(shape_)(cube2); // 8
			const volume3 = (volume_)(shape_)(cube3); // 1
			const volume4 = (volume_)(shape_)(cube4); // 8
			const volume5 = (volume_)(shape_)(cube5); // 1
			const volume6 = (volume_)(shape_)(sphere1); // 0.5235987755982988
			const volume7 = (volume_)(shape_)(sphere2); // 4.1887902047863905
			const volume8 = (volume_)(shape_)(sphere3); // 0.9999999999999997
			const volume9 = (volume_)(shape_)(sphere4); // 7.999999999999997
			const volume10 = (volume_)(shape_)(sphere5); // 1.3819765978853422
			const volume11 = (volume_)(shape_)(cylinder1); // 0.7853981633974483
			const volume12 = (volume_)(shape_)(cylinder2); // 6.283185307179586
			const volume13 = (volume_)(shape_)(cylinder3); // 1.0000000000000002
			const volume14 = (volume_)(shape_)(cylinder4); // 8.000000000000002
			const volume15 = (volume_)(shape_)(cylinder5); // 1.1283791670955123
			const invariant1 = (invariant_)(shape_)(cube1); // 0.004629629629629629
			const invariant2 = (invariant_)(shape_)(cube2); // 0.004629629629629629
			const invariant3 = (invariant_)(shape_)(cube3); // 0.004629629629629629
			const invariant4 = (invariant_)(shape_)(cube4); // 0.004629629629629629
			const invariant5 = (invariant_)(shape_)(cube5); // 0.004629629629629629
			const invariant6 = (invariant_)(shape_)(sphere1); // 0.008841941282883074
			const invariant7 = (invariant_)(shape_)(sphere2); // 0.008841941282883074
			const invariant8 = (invariant_)(shape_)(sphere3); // 0.008841941282883072
			const invariant9 = (invariant_)(shape_)(sphere4); // 0.008841941282883072
			const invariant10 = (invariant_)(shape_)(sphere5); // 0.008841941282883074
			const invariant11 = (invariant_)(shape_)(cylinder1); // 0.005894627521922049
			const invariant12 = (invariant_)(shape_)(cylinder2); // 0.0049735919716217296
			const invariant13 = (invariant_)(shape_)(cylinder3); // 0.005894627521922052
			const invariant14 = (invariant_)(shape_)(cylinder4); // 0.005894627521922052
			const invariant15 = (invariant_)(shape_)(cylinder5); // 0.005894627521922049
			////////////////////////////////////////////////////////////////////////////////////////
			// script n (V3):
			console.log('"' + label1 + '" === "cube of side 1": ' + (label1 === "cube of side 1"));
			console.log('"' + label2 + '" === "cube of side 2": ' + (label2 === "cube of side 2"));
			console.log('"' + label3 + '" === "cube of side 1": ' + (label3 === "cube of side 1"));
			console.log('"' + label4 + '" === "cube of side 2": ' + (label4 === "cube of side 2"));
			console.log('"' + label5 + '" === "cube of side 1": ' + (label5 === "cube of side 1"));
			console.log('"' + label6 + '" === "sphere of radius 0.5": ' + (label6 === "sphere of radius 0.5"));
			console.log('"' + label7 + '" === "sphere of radius 1": ' + (label7 === "sphere of radius 1"));
			console.log('"' + label8 + '" === "sphere of radius 0.6203504908994": ' + (label8 === "sphere of radius 0.6203504908994"));
			console.log('"' + label9 + '" === "sphere of radius 1.2407009817988": ' + (label9 === "sphere of radius 1.2407009817988"));
			console.log('"' + label10 + '" === "sphere of radius 0.690988298942671": ' + (label10 === "sphere of radius 0.690988298942671"));
			console.log('"' + label11 + '" === "cylinder of radius 0.5 and height 1": ' + (label11 === "cylinder of radius 0.5 and height 1"));
			console.log('"' + label12 + '" === "cylinder of radius 1 and height 2": ' + (label12 === "cylinder of radius 1 and height 2"));
			console.log('"' + label13 + '" === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781": ' + (label13 === "cylinder of radius 0.5419260701392891 and height 1.0838521402785781"));
			console.log('"' + label14 + '" === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562": ' + (label14 === "cylinder of radius 1.0838521402785781 and height 2.1677042805571562"));
			console.log('"' + label15 + '" === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126": ' + (label15 === "cylinder of radius 0.5641895835477563 and height 1.1283791670955126"));
			console.log(surface1 + ' === 6: ' + (surface1 === 6));
			console.log(surface2 + ' === 24: ' + (surface2 === 24));
			console.log(surface3 + ' === 6: ' + (surface3 === 6));
			console.log(surface4 + ' === 24: ' + (surface4 === 24));
			console.log(surface5 + ' === 6: ' + (surface5 === 6));
			console.log(surface6 + ' === 3.141592653589793: ' + (surface6 === 3.141592653589793));
			console.log(surface7 + ' === 12.566370614359172: ' + (surface7 === 12.566370614359172));
			console.log(surface8 + ' === 4.835975862049408: ' + (surface8 === 4.835975862049408));
			console.log(surface9 + ' === 19.343903448197633: ' + (surface9 === 19.343903448197633));
			console.log(surface10 + ' === 6.000000000000001: ' + (surface10 === 6.000000000000001));
			console.log(surface11 + ' === 4.71238898038469: ' + (surface11 === 4.71238898038469));
			console.log(surface12 + ' === 18.84955592153876: ' + (surface12 === 18.84955592153876));
			console.log(surface13 + ' === 5.535810445932086: ' + (surface13 === 5.535810445932086));
			console.log(surface14 + ' === 22.143241783728342: ' + (surface14 === 22.143241783728342));
			console.log(surface15 + ' === 5.999999999999999: ' + (surface15 === 5.999999999999999));
			console.log(volume1 + ' === 1: ' + (volume1 === 1));
			console.log(volume2 + ' === 8: ' + (volume2 === 8));
			console.log(volume3 + ' === 1: ' + (volume3 === 1));
			console.log(volume4 + ' === 8: ' + (volume4 === 8));
			console.log(volume5 + ' === 1: ' + (volume5 === 1));
			console.log(volume6 + ' === 0.5235987755982988: ' + (volume6 === 0.5235987755982988));
			console.log(volume7 + ' === 4.1887902047863905: ' + (volume7 === 4.1887902047863905));
			console.log(volume8 + ' === 0.9999999999999997: ' + (volume8 === 0.9999999999999997));
			console.log(volume9 + ' === 7.999999999999997: ' + (volume9 === 7.999999999999997));
			console.log(volume10 + ' === 1.3819765978853422: ' + (volume10 === 1.3819765978853422));
			console.log(volume11 + ' === 0.7853981633974483: ' + (volume11 === 0.7853981633974483));
			console.log(volume12 + ' === 6.283185307179586: ' + (volume12 === 6.283185307179586));
			console.log(volume13 + ' === 1.0000000000000002: ' + (volume13 === 1.0000000000000002));
			console.log(volume14 + ' === 8.000000000000002: ' + (volume14 === 8.000000000000002));
			console.log(volume15 + ' === 1.1283791670955123: ' + (volume15 === 1.1283791670955123));
			console.log(invariant1 + ' === 0.004629629629629629: ' + (invariant1 === 0.004629629629629629));
			console.log(invariant2 + ' === 0.004629629629629629: ' + (invariant2 === 0.004629629629629629));
			console.log(invariant3 + ' === 0.004629629629629629: ' + (invariant3 === 0.004629629629629629));
			console.log(invariant4 + ' === 0.004629629629629629: ' + (invariant4 === 0.004629629629629629));
			console.log(invariant5 + ' === 0.004629629629629629: ' + (invariant5 === 0.004629629629629629));
			console.log(invariant6 + ' === 0.008841941282883074: ' + (invariant6 === 0.008841941282883074));
			console.log(invariant7 + ' === 0.008841941282883074: ' + (invariant7 === 0.008841941282883074));
			console.log(invariant8 + ' === 0.008841941282883072: ' + (invariant8 === 0.008841941282883072));
			console.log(invariant9 + ' === 0.008841941282883072: ' + (invariant9 === 0.008841941282883072));
			console.log(invariant10 + ' === 0.008841941282883074: ' + (invariant10 === 0.008841941282883074));
			console.log(invariant11 + ' === 0.005894627521922049: ' + (invariant11 === 0.005894627521922049));
			console.log(invariant12 + ' === 0.005894627521922049: ' + (invariant12 === 0.005894627521922049));
			console.log(invariant13 + ' === 0.005894627521922052: ' + (invariant13 === 0.005894627521922052));
			console.log(invariant14 + ' === 0.005894627521922052: ' + (invariant14 === 0.005894627521922052));
			console.log(invariant15 + ' === 0.005894627521922049: ' + (invariant15 === 0.005894627521922049));
		})();
		console.error("unreachable script");
	}
	catch(exception){
		console.log('"' + exception.toString() + '" === "ReferenceError: sphere is not defined": ' + (exception.toString() === "ReferenceError: sphere is not defined"));
	}
})();

console.log("inceptions:");
(function(){
	var shape_ = APPLICATION("shape_");
	var label_ = APPLICATION("label_");
	var surface_ = APPLICATION("surface_");
	var volume_ = APPLICATION("volume_");
	var stretch_ = APPLICATION("stretch_");
	var invariant_ = APPLICATION("invariant_");
	var weight_ = APPLICATION("weight_");
	var alignment_ = APPLICATION("alignment_");
	var solid_ = APPLICATION("solid_");
	const shape = SPECIFICATION([
		[shape_, SPECIFICATION([
			[label_],
			[surface_],
			[volume_],
			[stretch_],
			[invariant_, definition => ((volume_)(shape_)(definition) * (volume_)(shape_)(definition)) / ((surface_)(shape_)(definition) * (surface_)(shape_)(definition) * (surface_)(shape_)(definition))],
			[alignment_],
		])],
	]);
	const cube = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => side => `cube of side ${side}`],
			[surface_, definition => side => side * side * 6],
			[volume_, definition => side => side * side * side],
			[stretch_, definition => side => k => cube(side * k)],
			[alignment_, definition => side => o => typeof o === "number"? o + side: alignment_(o)(side)],
		])],
	]));
	const sphere = DECLARATION(shape, IMPLEMENTATION([
		[shape_, IMPLEMENTATION([
			[label_, definition => radius => `sphere of radius ${radius}`],
			[surface_, definition => radius => radius * radius * Math.PI * 4],
			[volume_, definition => radius => radius * radius * radius * Math.PI * 4/3],
			[stretch_, definition => radius => k => sphere(radius * k)],
			[alignment_, definition => radius => o => typeof o === "number"? o + 2 * radius: alignment_(o)(2 * radius)],
		])],
	]));

	const inception1 = cube(1)()().map(application => application.name);
	console.log(JSON.stringify(inception1) + ' === ["shape_"]: ' + (JSON.stringify(inception1) === '["shape_"]'));

	const inception2 = cube(1)()(shape_).mapping().map(application => application.name);
	console.log(JSON.stringify(inception2) + ' === ["label_","surface_","volume_","stretch_","invariant_","alignment_"]: ' + (JSON.stringify(inception2) === '["label_","surface_","volume_","stretch_","invariant_","alignment_"]'));

	const inception3 = cube(1)()(shape_).mapping(alignment_);
	console.log(inception3 + ' === undefined: ' + (inception3 === undefined));

	const inception4 = cube(1)()(shape_).mapping(solid_);
	console.log(typeof(inception4) + ' === function: ' + (typeof(inception4) === "function"));

	const inception5 = cube(1)()(shape_).mapping(solid_)();
	console.log(inception5 + ' === undefined: ' + (inception5 === undefined));

	const inception6 = (shape_)();
	console.log('(shape_)() === [shape_]: ' + (Array.isArray(inception6) && inception6.length === 1 && inception6[0] === shape_));

	const inception7 = (stretch_)(shape_)();
	console.log('(stretch_)(shape_)() === [shape_,stretch_]: ' + (Array.isArray(inception7) && inception7.length === 2 && inception7[0] === shape_ && inception7[1] === stretch_));

	const inception8 = (shape_)(stretch_)(shape_)();
	console.log('(shape_)(stretch_)(shape_)() === [shape_,stretch_,shape_]: ' + (Array.isArray(inception8) && inception8.length === 3 && inception8[0] === shape_ && inception8[1] === stretch_ && inception8[2] === shape_));

	const inception9 = (label_)(shape_)(stretch_)(shape_)();
	console.log('(label_)(shape_)(stretch_)(shape_)() === [shape_,stretch_,shape_,label_]: ' + (Array.isArray(inception9) && inception9.length === 4 && inception9[0] === shape_ && inception9[1] === stretch_ && inception9[2] === shape_ && inception9[3] === label_));
})();

</script>
</body>
</html>