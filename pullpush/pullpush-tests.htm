<html>
<head>
<title>pullpush (Pull Push Functional Reactive Programming) tests</title>
<script src="pullpush.js"></script>
<script src="pullpush-minimo-library.js"></script>
<script src="pullpush-minimo-framework.js"></script>
<style id="style13">#sink39 { background-color: blue; color: white; }</style> 
</head>
<body>
<input id="input1" value="1"/> input1<br/>
<input id="input2" value="2"/> input2<br/>
<input id="input3" value="3"/> input3<br/>
<input id="input4" value="4"/> input4<br/>
<input id="input5" value="5"/> input5<br/>
<input id="input6" value="table"/> input6<br/>
<input id="input7" value="filter"/> input7<br/>
<input id="input8" value="800"/> input8<br/>
<input id="input9" value="9"/> input9<br/>
<input id="input10" value="10"/> input10<br/>
<input id="input11" value="11"/> input11<br/>
<input id="input16" value="16"/> input16<br/>
<br/>
<input id="sink1" readonly/> input1 with "-test1-" prefix<br/>
<input id="sink2" readonly/> input1 with "-test2-" prefix<br/>
<input id="sink3" readonly/> input2 + input3<br/>
<input id="sink4" readonly/> input3? input4: input5<br/>
<input id="sink5" readonly/> input2? input4: input5<br/>
<input id="sink6" readonly/> input1 with "-test1-" prefix + input1 with "-test2-" prefix<br/>
<input id="sink7" readonly/> count of records (tooltip shows the records) queried on upper-case input6 table with input7 filter (empty filter: 2 records, long filter: 0 records)<br/>
<input id="sink8" readonly/> sin with input8 frequence sampled every 10 milliseconds<br/>
<input id="sink9" readonly/> sin with input8 frequence sampled every 100 milliseconds<br/>
<input id="sink10" readonly/> input9 divided by 2 recursively<br/>
<input id="sink11" readonly/> increment counter every second from 90 to 100<br/>
<input id="sink12" readonly/> increment counter every other second<br/>
<input id="sink13" readonly/> time every second<br/>
<input id="sink14" readonly/> time every other second<br/>
<input id="sink15" readonly/> time every other second starting at 10000000 up to 10009999<br/>
<input id="sink16" readonly/> input10 or input11<br/>
<input id="sink17" readonly/> input10 and input11 (composition)<br/>
<input id="sink18" readonly/> input10 and input11 (shared composition)<br/>
<input id="sink19" readonly/> implicit sink id<br/>
<input id="sink20" readonly/> warning 1<br/>
<input id="sink21" readonly/> immutable sink argument<br/>
<input id="sink22" readonly/> map double on timer<br/>
<input id="sink23" readonly/> input11 identity<br/>
<input id="sink24" readonly/> input11 unit<br/>
<input id="sink25" readonly/> apl double on timer<br/>
<input id="sink26" readonly/> apr double on timer<br/>
<input id="sink27" readonly/> step every second<br/>
<input id="sink28" readonly/> step time every second<br/>
<input id="sink29" readonly/> step double time every other second<br/>
<input id="sink30" readonly/> step double time every other second unless input1 is empty<br/>
<input id="sink31" readonly/> fibonacci series unless input1 is empty (reset when input1 is empty)<br/>
<input id="sink32" readonly/> fibonacci series unless input1 is empty (not reset when input1 is empty)<br/>
<input id="sink33" readonly/> fibonacci series every input1 seconds (on-hold when input1 is empty)<br/>
<input id="sink34" readonly/> locality<br/>
<input id="sink35" readonly/> button12 clicks <input id="button12" value="button12" type="button"/><br/>
<input id="sink36" readonly/> button12 clicked (immediate reset)<br/>
<input id="sink37" readonly/> button12 clicked (50 milli-second delay reset)<br/>
<input id="sink38" readonly/> button12 clicked (500 milli-second delay reset)<br/>
<input id="sink39" readonly/> style12 disabled by button12 toggle<br/>
<input id="sink40" readonly/> style12 enabled<br/>
<input id="sink41" readonly/> focused on button13 click <input id="focus14" value="focus14"/><input id="button15" value="button15" type="button"/><br/>
<input id="sink42" readonly/> length of title (input1 and input2)<br/>
<input id="sink43" readonly/> title of previous field<br/>
<input id="sink44" readonly/> input1 * input16 (ignore input16 when input1 is 0 or NaN)<br/>
<input id="sink45" readonly/> next fibonacci number on button15 click (using local sources)<br/>
<input id="sink46" readonly/> next fibonacci number on button15 click (using global sources)<br/>
<input id="sink47" readonly/> next fibonacci number on button15 click (using global sources depending on input1 emptiness without persistency)<br/>
<input id="sink48" readonly/> next fibonacci number on button15 click (using global sources depending on input1 emptiness with persistency)<br/>
<input id="sink49" readonly/> javascript exceptions <input id="button17" value="direct error" type="button"/><input id="button18" value="indirect error" type="button"/><input id="button19" value="system error" type="button" onclick="null()"/><br/>
<input id="sink50" readonly style="width:800px"/> toggle image <input id="button20" value="toggle" type="button"/><img id="img21" height="50"/><br/>
<input id="sink51" readonly/> button22 clicks with three second lag <input id="button22" value="button22" type="button"/><br/>
<input id="sink52" readonly/> span24 text node value <input id="button23" value="use input1 as span24 text" type="button"/><span id="span24" style="background:grey">span24</span><br/>
<input id="sink53" readonly style="width:800px"/> div26 inner HTML <input id="button25" value="use input1 as div26 inner HTML" type="button"/><div id="div26" style="background:yellow">div26</div><br/>
<input id="sink54" readonly/> chain (2 * (3 + (input27 * (1 + (2 * input27)))) initialy equal to 26 and 6 for 0 input27 <input id="input27" value="2"/> input27<br/>
<input id="sink55" readonly/> composition (2 * (3 + (input27 * (1 + (2 * input27)))) initialy equal to 26 and 6 for 0 input27<br/>
<input id="sink56" readonly/> eval invalid expression input29 <input id="button28" value="fix invalid expression input29" type="button"/> <input id="input29" value="NaN()"/> input29<br/>
<input id="sink57" readonly/> fibonacci series <input id="button34" value="four times" type="button"/><input id="button33" value="thrice" type="button"/><input id="button32" value="twice" type="button"/><input id="button31" value="once" type="button"/><input id="button38" value="fourth" type="button"/><input id="button37" value="third" type="button"/><input id="button36" value="second" type="button"/><input id="button35" value="first" type="button"/><input id="button30" value="none" type="button"/><input id="button39" value="clip 4-7: 8, 13, 21" type="button"/><input id="button40" value="skip 7: 34, 55..." type="button"/><br/>
<input id="sink58" readonly/> undefined (0th fibonacci series) </br>
<input id="sink59" readonly/> "once upon a time" (1th fibonacci series) </br>
<input id="sink60" readonly/> undefined (2th fibonacci series) </br>
<input id="sink61" readonly/> undefined (0 times) </br>
<input id="sink62" readonly/> "once upon a time" (1 times) </br>
<input id="sink63" readonly/> "once upon a time" (2 times) </br>
<input id="sink64" readonly/> undefined (clipper 0-0) </br>
<input id="sink65" readonly/> "once upon a time" (clipper 0-1) </br>
<input id="sink66" readonly/> "once upon a time" (clipped fibonacci series: 0-2) </br>
<input id="sink67" readonly/> undefined (clipper 1-1) </br>
<input id="sink68" readonly/> undefined (clipper 1-2) </br>
<input id="sink69" readonly/> undefined (clipper 1-3) </br>
<input id="sink70" readonly/> filter: odd + tenths </br>
<input id="sink71" readonly/> reduce: sum of integers </br>
<input id="sink72" readonly/> deduce: fibonacci series </br>
<script>
function sink1(sink){
	document.getElementById("sink1").value = pullpush(sink, insert1, "-test1-"); 
}
function sink2(sink){
	document.getElementById("sink2").value = pullpush(sink, insert1, "-test2-"); 
}
function sink3(sink){
	document.getElementById("sink3").value = pullpush(sink, sum); 
}
function sink4(sink){
	document.getElementById("sink4").value = pullpush(sink, fork, pullpush(sink("input3"), input("input3"))? true: false);
}
function sink5(sink){
	document.getElementById("sink5").value = pullpush(sink, fork, pullpush(sink("input2"), input("input2"))? true: false);
}
function sink6(sink){
	document.getElementById("sink6").value = pullpush(sink, merge); 
}
function sink7(sink){
	document.getElementById("sink7").value = pullpush(sink, query7); 
}
function sink8(sink){
	document.getElementById("sink8").value = pullpush(sink, sin8, 10);
}
function sink9(sink){
	document.getElementById("sink9").value = pullpush(sink, sin8, 100);
}
function sink10(sink){
	document.getElementById("sink10").value = pullpush(sink, divide10); 
}
function sink11(sink){
	document.getElementById("sink11").value = pullpush(sink, counter, 1000, 90, 100);
}
function sink12(sink){
	document.getElementById("sink12").value = pullpush(sink, counter, 2000);
}
function sink13(sink){
	document.getElementById("sink13").value = pullpush(sink, timer, 1000); 
}
function sink14(sink){
	document.getElementById("sink14").value = pullpush(sink, timer, 2000);
}
function sink15(sink){
	document.getElementById("sink15").value = pullpush(sink, timer, 2000, 10000000, 10009999); 
}
function sink16(sink){
	document.getElementById("sink16").value = pullpush(sink, latest16);
}
function sink17(sink){
	document.getElementById("sink17").value = pullpush(sink, all17);
}
function sink18(sink){
	document.getElementById("sink18").value = pullpush(sink, all18);
}
function sink19(sink){
	document.getElementById("sink19").value = pullpush(sink, implicit19);
}
function sink20(sink){
	document.getElementById("sink20").value = pullpush(sink, warning20);
}
function sink21(sink){
	document.getElementById("sink21").value = pullpush(sink, immutability21);
}
function sink22(sink){
	//todo how to unify values debug1 and debug2 (implement "merge" in library?)
	//debug let debug1 = pullpush(sink("debug1"), counter, 1000); //debug
	//debug let debug2 = pullpush(sink("debug2"), counter, 1000); //debug
	document.getElementById("sink22").value = pullpush(sink, mapl22, 1000); 
}
function sink23(sink){
	document.getElementById("sink23").value = pullpush(sink, identity, pullpush(sink, input("input11"))); 
}
function sink24(sink){
	pullpush(sink, false); // declaration to not keep the unused source
	let value = pullpush(sink, input("input11"));
	let name = value;
	let named = {
		[name]: function(){
			return value;
		},
	};
	let source = named[name]; // named constant source (the source needs to have a different name for different values in order for the corresponding sink to be replaced)
	document.getElementById("sink24").value = pullpush(sink, unit(source));
}
function sink25(sink){
	document.getElementById("sink25").value = pullpush(sink, apl25, 1000); 
}
function sink26(sink){
	document.getElementById("sink26").value = pullpush(sink, apr26, 1000);
}
function sink26(sink){
	document.getElementById("sink26").value = pullpush(sink, apr26, 1000);
}
function sink27(sink){
	document.getElementById("sink27").value = pullpush(sink, stepper, 1000);
}
function sink28(sink){
	document.getElementById("sink28").value = pullpush(sink, steptime28, 1000);
}
function sink29(sink){
	document.getElementById("sink29").value = pullpush(sink, steptime29, 2000);
}
function sink30(sink){
	document.getElementById("sink30").value = pullpush(sink, steptime30, 2000);
}
function sink31(sink){
	document.getElementById("sink31").value = pullpush(sink, series31, 1000);
}
function sink32(sink){
	document.getElementById("sink32").value = pullpush(sink, series32, 1000);
}
function sink33(sink){
	document.getElementById("sink33").value = pullpush(sink, series33, 1000);
}
function sink34(sink){
	document.getElementById("sink34").value = pullpush(sink, warning34);
}
function sink35(sink){
	document.getElementById("sink35").value = pullpush(sink, clicks35);
}
function sink36(sink){
	document.getElementById("sink36").value = pullpush(sink, clicks36);
}
function sink37(sink){
	document.getElementById("sink37").value = pullpush(sink, clicks37);
}
function sink38(sink){
	document.getElementById("sink38").value = pullpush(sink, clicks38);
}
function sink39(sink){
	document.getElementById("sink39").value = pullpush(sink, style39);
}
function sink40(sink){
	document.getElementById("sink40").value = pullpush(sink, style40);
}
function sink41(sink){
	document.getElementById("sink41").value = pullpush(sink, focus41);
}
function sink42(sink){
	document.getElementById("sink42").value = pullpush(sink, title42);
}
function sink43(sink){
	document.getElementById("sink43").value = pullpush(sink, title43);
}
function sink44(sink){
	document.getElementById("sink44").value = pullpush(sink, unregister44);
}
function sink45(sink){
	document.getElementById("sink45").value = pullpush(sink, fibonacci45);
}
function sink46(sink){
	document.getElementById("sink46").value = pullpush(sink, fibonacci46);
}
function sink47(sink){
	document.getElementById("sink47").value = pullpush(sink, fibonacci47);
}
function sink48(sink){
	document.getElementById("sink48").value = pullpush(sink, fibonacci48);
}
function sink49(sink){
	document.getElementById("sink49").value = pullpush(sink, error49);
}
function sink50(sink){
	document.getElementById("sink50").value = pullpush(sink, img50);
}
function sink51(sink){
	document.getElementById("sink51").value = pullpush(sink, lagger51);
}
function sink52(sink){
	document.getElementById("sink52").value = pullpush(sink, text52);
}
function sink53(sink){
	document.getElementById("sink53").value = pullpush(sink, html53);
}
function sink54(sink){
	document.getElementById("sink54").value = pullpush(sink, chain54);
}
function sink55(sink){
	document.getElementById("sink55").value = pullpush(sink, composition55);
}
function sink56(sink){
	document.getElementById("sink56").value = pullpush(sink, shield(eval56, error56));
}
function sink57(sink){
	document.getElementById("sink57").value = pullpush(sink, series57);
}
function sink58(sink){
	document.getElementById("sink58").value = pullpush(sink, nth((onceuponatime58), 0)); //todo remove unnecessary parenthesis
}
function sink59(sink){
	document.getElementById("sink59").value = pullpush(sink, nth((onceuponatime58), 1)); //todo remove unnecessary parenthesis
}
function sink60(sink){
	document.getElementById("sink60").value = pullpush(sink, nth((onceuponatime58), 2)); //todo remove unnecessary parenthesis
}
function sink61(sink){
	document.getElementById("sink61").value = pullpush(sink, times((onceuponatime58), 0)); //todo remove unnecessary parenthesis
}
function sink62(sink){
	document.getElementById("sink62").value = pullpush(sink, times((onceuponatime58), 1)); //todo remove unnecessary parenthesis
}
function sink63(sink){
	document.getElementById("sink63").value = pullpush(sink, times((onceuponatime58), 2)); //todo remove unnecessary parenthesis
}
function sink64(sink){
	document.getElementById("sink64").value = pullpush(sink, clipper((onceuponatime58), 0, 0)); //todo remove unnecessary parenthesis
}
function sink65(sink){
	document.getElementById("sink65").value = pullpush(sink, clipper((onceuponatime58), 0, 1)); //todo remove unnecessary parenthesis
}
function sink66(sink){
	document.getElementById("sink66").value = pullpush(sink, clipper((onceuponatime58), 0, 2)); //todo remove unnecessary parenthesis
}
function sink67(sink){
	document.getElementById("sink67").value = pullpush(sink, clipper((onceuponatime58), 1, 1)); //todo remove unnecessary parenthesis
}
function sink68(sink){
	document.getElementById("sink68").value = pullpush(sink, clipper((onceuponatime58), 1, 2)); //todo remove unnecessary parenthesis
}
function sink69(sink){
	document.getElementById("sink69").value = pullpush(sink, clipper((onceuponatime58), 1, 3)); //todo remove unnecessary parenthesis
}
function sink70(sink){
	document.getElementById("sink70").value = pullpush(sink, filter(counter, (value, index) => value % 2 === 1 || index % 10 === 0), 200);
}
function sink71(sink){
	document.getElementById("sink71").value = pullpush(sink, reduce(counter, (accumulator, value) => accumulator + value, 0), 1000);
}
function sink72(sink){
	document.getElementById("sink72").value = pullpush(sink, deduce(counter, (value1, value2) => value1 + value2, 0, 1), 1000);
}
function insert1(sink, prefix){
	return prefix + pullpush(sink("input1"), input("input1"));
}
function sum(sink){
	return Number(pullpush(sink("input2"), input("input2"))) + Number(pullpush(sink, input("input3")));
}
function fork(sink, condition){
	pullpush(sink("input4"), true); // declaration to keep the unused source
	pullpush(sink("input5"), true); // declaration to keep the unused source
	return condition? pullpush(sink("input4"), input("input4")): pullpush(sink("input5"), input("input5"));
}
function merge(sink, condition){
	return pullpush(sink("test1"), insert1, "-test1-") + pullpush(sink, insert1, "-test2-");
}
function message7(sink, table, filter){
	// simulate an asynchronous query with window.postMessage
	pullpush(sink, backend7, table, filter);
	return pullpush(sink, frontend7, table, filter);
}
function backend7(sink, table, filter){
	pullpush(sink("response"), true); // declaration to keep the unused source
	var query = pullpush(sink("request"), message());
	if(query){
		let items = query.split("/");
		if(items[0] === "request" && items[1] === table && items[2] === filter){
			let records = filter.length === 0? "azerty\nquerty\n": filter.length < 10? "azerty\n": "";
			pullpush(sink("response"), lagger(message(), 2000), "response/" + table + "/" + filter + "/" + records);
		}
	}
}
function frontend7(sink, table, filter){
	pullpush(sink("request"), message(), "request/" + table + "/" + filter);
	var query = pullpush(sink, message());
	if(query){
		let items = query.split("/");
		if(items[0] === "response" && items[1] === table && items[2] === filter){
			return items[3];
		}
	}
}
function query7(sink){
	let table = pullpush(sink, input("input6"));
	let filter = pullpush(sink, input("input7"));
	let result = pullpush(sink, message7, table.toUpperCase(), filter);
	pullpush(sink, title("sink7"), result);
	let count = (result === undefined)? "": result.split("\n").length - 1;
	return count;
}
function sin8(sink, delay){
	let a = pullpush(sink, timer, delay);
	let b = pullpush(sink, input("input8"));
	let c =  a / b;
	let d =  Math.sin(c);
	let e = (d + 1) * 20 ;
	let value = "";
	for(let index = 0; index < e; index++)
	{
		value += " ";
	}
	value += "o";
	return value;
}
function divide10(sink){
	pullpush(sink("input9b"), false); // declaration to not keep the unused skink
	let value = Number(pullpush(sink("input9a"), input("input9")));
	if(value >= 2){
		value = value / 2;
		value = pullpush(sink("input9b"), input("input9"), value, 2000);
	}
	return value;
}
let latest1011 = latest([input("input10"), input("input11")]);
function latest16(sink){
	return pullpush(sink, latest1011);
}
let allValues17 = all([input("input10"), input("input11")]);
function all17(sink){
	let values = pullpush(sink, allValues17);
	return Number(values[0]) + Number(values[1]);
}
function all18(sink){
	let values = pullpush(sink, allValues17);
	return Number(values[0]) + Number(values[1]);
}
function implicit19(sink){
	let value = pullpush.id(sink);
	return value;
}
function combinator20(source1, sourcer1, sourcer2, source2){
	return sourcer1(source1, sourcer2(source1, source2));
}
function warning20(sink){
	return pullpush(sink, combinator20(function duplicate(sink){
			// throws an exception because pullpush cannot be called with the same sink
			Number(pullpush(sink, allValues17)[0]) + Number(pullpush(sink, allValues17)[1]);
			return "error: an exception should have occured because pullpush cannot be called with the same sink";
		},
		shell,
		shield,
		function handler(sink, exception){
			if(exception instanceof Error && typeof exception.message === "string" && parseInt(exception.message) === 1){
				return "success: " + exception.name + " warning " + exception.message;
			}
			throw exception;
		}));
}
function sink21immutability(sink){
	let value = pullpush.value(sink);
	if(value === sink){
		return "unexpected reference equality";
	}
	return sink;
}
function immutability21(sink){
	let error1 = pullpush(sink, sink21immutability);
	if(typeof error1 === "string"){
		return "error: sink is not immutable";
	}
	pullpush(sink, counter, 1000, 0, 10);
	return "success: sink is immutable"
}
let mapl22 = mapl(x => 2 * x, timer);
let double = function double(x){
	return 2 * x;
}
let double25 = function(sink){
	return double;
}
let apl25 = apl(double25, timer);
let double26 = function(sink){
	return double;
}
let apl26 = apl(double26, timer);
let apr26 = apr(timer, double26);
function steptime28(sink, delay){
	let time = pullpush.time(sink);
	pullpush(sink, stepper, delay);
	return time;
}
function steptime29(sink, delay){
	let time = pullpush.time(sink);
	pullpush(sink, stepper, delay);
	return time * 2;
}
function steptime30(sink, delay){
	pullpush(sink("stepper"), false); // declaration to not keep the unused source
	let value = pullpush(sink, input("input1"));
	if(!value){
		return "";
	}
	let time = pullpush.time(sink);
	pullpush(sink("stepper"), stepper, delay);
	return time * 2;
}
function fibonacci(index, values, value0, value1){
	if(index === 0){
		return [value1, value0 + value1];
	}
	return [values.value[1], values.value[0] + values.value[1]];
}
function series31(sink, delay){
	pullpush(sink("series"), false);  // declaration to not keep the unused source
	pullpush(sink("stepper"), false); // declaration to not keep the unused source
	let value = pullpush(sink, input("input1"));
	if(!value){
		return "";
	}
	return pullpush(sink("series"), series, pullpush(sink("stepper"), stepper, delay), fibonacci, 0, 1);
}
function series32(sink, delay){
	pullpush(sink(stepper.name), true); // declaration to keep the unused source
	pullpush(sink(series.name), true); // declaration to keep the unused source
	let value = pullpush(sink, input("input1"));
	if(!value){
		return "";
	}
	return pullpush(sink(series.name), series, pullpush(sink(stepper.name), stepper, delay), fibonacci, 0, 1);
}
function series33(sink, delay){
	let period = pullpush(sink, input("input1"));
	return pullpush(sink, series, pullpush(sink, stepper, parseInt(period) * 1000), fibonacci, 0, 1);
}
let warnings34 = {};
function warning34(sink){
	if(!warnings34.id){
		pullpush(sink("id"), shield(function id(sink, parent){
				let result = pullpush.id(parent);
				return "error: pullpush.id locality not abided: " + result;
			},
			function handler(sink, exception){
				if(exception instanceof Error && typeof exception.message === "string" && exception.message.indexOf("pullpush.id") >= 0){
					warnings34.id = true;
				}
				else{
					throw exception;
				}
			}), sink);
	}
	if(!warnings34.sequence){
		pullpush(sink("sequence"), shield(function sequence(sink, parent){
				let result = pullpush.sequence(parent);
				return "error: pullpush.sequence locality not abided: " + result;
			},
			function handler(sink, exception){
				if(exception instanceof Error && typeof exception.message === "string" && exception.message.indexOf("pullpush.sequence") >= 0){
					warnings34.sequence = true;
				}
				else{
					throw exception;
				}
			}), sink);
	}
	if(!warnings34.time){
		pullpush(sink("time"), shield(function time(sink, parent){
				let result = pullpush.time(parent);
				return "error: pullpush.time locality not abided: " + result;
			},
			function handler(sink, exception){
				if(exception instanceof Error && typeof exception.message === "string" && exception.message.indexOf("pullpush.time") >= 0){
					warnings34.time = true;
				}
				else{
					throw exception;
				}
			}), sink);
	}
	if(!warnings34.value){
		pullpush(sink("value"), shield(function value(sink, parent){
				let result = pullpush.value(parent);
				return "error: pullpush.value locality not abided: " + result;
			},
			function handler(sink, exception){
				if(exception instanceof Error && typeof exception.message === "string" && exception.message.indexOf("pullpush.value") >= 0){
					warnings34.value = true;
				}
				else{
					throw exception;
				}
			}), sink);
	}
	return "success: locality abided";
}
function clicks35(sink){
	return pullpush(sink, click("button12"));
}
function clicks36(sink){
	return pullpush(sink, switcher(click("button12"), 0));
}
function clicks37(sink){
	return pullpush(sink, switcher(click("button12"), 50));
}
function clicks38(sink){
	return pullpush(sink, switcher(click("button12"), 500));
}
function style39(sink){
	let disable = pullpush(sink, toggle(click("button12")));
	return pullpush(sink, disabled("style13"), disable, 0);
}
function style40(sink){
	return !pullpush(sink, disabled("style13"));
}
function focus41(sink){
	let triggered = pullpush(sink, trigger(click("button15")));
	if(triggered){
		return pullpush(sink, focus("focus14"), true, 0);
	}
	return pullpush(sink, focus("focus14"));
}
function title42(sink){
	let text1 = pullpush(sink, input("input1"));
	let text2 = pullpush(sink, input("input2"));
	let text = text1 + text2;
	pullpush(sink, title("sink42"), text, 0);
	return text.length;
}
function title43(sink){
	return pullpush(sink, title("sink42"));
}
function unregister44(sink){
	pullpush(sink("input16"), false); // declaration to not keep the unused source
	let value1 = Number(pullpush(sink, input("input1")));
	if(value1 > 0){
		let value16 = Number(pullpush(sink("input16"), input("input16")));
		return value1 * value16;
	}
	return value1;
}
function fibonacci45(sink){
	let triggered = pullpush(sink, trigger(click("button15")));
	if(triggered){
		let value2a = pullpush(sink(2), local, 1);
		let value1a = pullpush(sink(1), local, 1, value2a);
		let value0a = pullpush(sink(0), local, 0, value1a);
		return value0a + value1a;
	}
	let value1b = pullpush(sink(1), local, 1);
	let value0b = pullpush(sink(0), local, 0);
	return pullpush(sink(2), local, 1, value0b + value1b);
}
function nextFibonacci46(sink, value3){
	let triggered = pullpush(sink, trigger(click("button15")));
	let value2 = pullpush(sink, global("fibonacci46:2"), 1, triggered? value3: undefined);
	let value1 = pullpush(sink, global("fibonacci46:1"), 0, triggered? value2: undefined);
	let value = pullpush(sink, global("fibonacci46:3"), undefined, triggered? undefined: value2 + value1);
	return value;
}
function fibonacci46(sink){
	let value2 = pullpush(sink, global("fibonacci46:2"), 1);
	let value1 = pullpush(sink, global("fibonacci46:1"), 0);
	let value = pullpush(sink, nextFibonacci46, value2 + value1);
	return value;
}
function nextFibonacci47a(sink, value3){
	pullpush(sink("fibonacci47:2a"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:1a"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:3a"), false); // declaration to not keep the unused source
	let triggered = pullpush(sink, trigger(click("button15")));
	let value2 = pullpush(sink, global("fibonacci47:2a"), 1, triggered? value3: undefined);
	let value1 = pullpush(sink, global("fibonacci47:1a"), 0, triggered? value2: undefined);
	let value = pullpush(sink, global("fibonacci47:3a"), undefined, triggered? undefined: value2 + value1);
	return value;
}
function nextFibonacci47b(sink, value3){
	pullpush(sink("fibonacci47:2b"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:1b"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:3b"), false); // declaration to not keep the unused source
	let triggered = pullpush(sink, trigger(click("button15")));
	let value2 = pullpush(sink, global("fibonacci47:2b"), 1, triggered? value3: undefined);
	let value1 = pullpush(sink, global("fibonacci47:1b"), 0, triggered? value2: undefined);
	let value = pullpush(sink, global("fibonacci47:3b"), undefined, triggered? undefined: value2 + value1);
	return value;
}
function fibonacci47(sink){
	pullpush(sink("fibonacci47:1a"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:2a"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:3a"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:1b"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:2b"), false); // declaration to not keep the unused source
	pullpush(sink("fibonacci47:3b"), false); // declaration to not keep the unused source
	let input1 = pullpush(sink, input("input1"));
	if(input1){
		let value2a = pullpush(sink("fibonacci47:2a"), global("fibonacci47:2a"), 1);
		let value1a = pullpush(sink("fibonacci47:1a"), global("fibonacci47:1a"), 0);
		let value3a = pullpush(sink("fibonacci47:3a"), nextFibonacci47a, value2a + value1a);
		return value3a;
	}
	let value2b = pullpush(sink("fibonacci47:2b"), global("fibonacci47:2b"), 1);
	let value1b = pullpush(sink("fibonacci47:1b"), global("fibonacci47:1b"), 0);
	let value3b = pullpush(sink("fibonacci47:3b"), nextFibonacci47b, value2b + value1b);
	return value3b;
}
function nextFibonacci48a(sink, value3){
	pullpush(sink("fibonacci48:2a"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:1a"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:3a"), true); // declaration to keep the unused source
	let triggered = pullpush(sink, trigger(click("button15")));
	let input1 = pullpush(sink, input("input1"));
	if(input1){
		let value2 = pullpush(sink("fibonacci48:2a"), global("fibonacci48:2a"), 1, triggered? value3: undefined);
		let value1 = pullpush(sink("fibonacci48:1a"), global("fibonacci48:1a"), 0, triggered? value2: undefined);
		let value = pullpush(sink("fibonacci48:3a"), global("fibonacci48:3a"), undefined, triggered? undefined: value2 + value1);
		return value;
	}
}
function nextFibonacci48b(sink, value3){
	pullpush(sink("fibonacci48:2b"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:1b"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:3b"), true); // declaration to keep the unused source
	let triggered = pullpush(sink, trigger(click("button15")));
	let input1 = pullpush(sink, input("input1"));
	if(!input1){
		let value2 = pullpush(sink("fibonacci48:2b"), global("fibonacci48:2b"), 1, triggered? value3: undefined);
		let value1 = pullpush(sink("fibonacci48:1b"), global("fibonacci48:1b"), 0, triggered? value2: undefined);
		let value = pullpush(sink("fibonacci48:3b"), global("fibonacci48:3b"), undefined, triggered? undefined: value2 + value1);
		return value;
	}
}
function fibonacci48(sink){
	pullpush(sink("fibonacci48:2a"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:1a"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:3a"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:2b"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:1b"), true); // declaration to keep the unused source
	pullpush(sink("fibonacci48:3b"), true); // declaration to keep the unused source
	let input1 = pullpush(sink, input("input1"));
	if(input1){
		let value2a = pullpush(sink("fibonacci48:2a"), global("fibonacci48:2a"), 1);
		let value1a = pullpush(sink("fibonacci48:1a"), global("fibonacci48:1a"), 0);
		let value3a = pullpush(sink("fibonacci48:3a"), nextFibonacci48a, value2a + value1a);
		return value3a;
	}
	let value2b = pullpush(sink("fibonacci48:2b"), global("fibonacci48:2b"), 1);
	let value1b = pullpush(sink("fibonacci48:1b"), global("fibonacci48:1b"), 0);
	let value3b = pullpush(sink("fibonacci48:3b"), nextFibonacci48b, value2b + value1b);
	return value3b;
}
function error49(sink){
	pullpush(sink("button17"), false); // declaration to not keep the unused source
	pullpush(sink("button18"), false); // declaration to not keep the unused source
	pullpush(sink("direct"), false); // declaration to not keep the unused source
	pullpush(sink("error"), false); // declaration to not keep the unused source
	let direct = pullpush(sink("button17"), trigger(click("button17")));
	if(direct){
		return pullpush(sink("direct"), error(), Error("direct error"));
	}
	let indirect = pullpush(sink("button18"), trigger(click("button18")));
	if(indirect){
		return undefined();
	}
	let value = pullpush(sink("error"), error());
	return value || "";
}
function img50(sink){
	let clicks = pullpush(sink, click("button20")) % 4;
	pullpush(sink, src("img21"), clicks === 0? "pullpush-tests-img21a.png": clicks === 1? "pullpush-tests-img21x.png": clicks === 2? "pullpush-tests-img21b.png": "pullpush-tests-img21y.png");
	return pullpush(sink, latest([load("img21"), error("img21")])) || "";
}
function lagger51(sink){
	return pullpush(sink, lagger(click("button22"), 3000)) || "";
}
function text52(sink){
	let input1 = pullpush(sink, input("input1"));
	let clicks = pullpush(sink, click("button23"));
	return pullpush(sink, text("span24"), clicks? input1: undefined);
}
function html53(sink){
	let input1 = pullpush(sink, input("input1"));
	let clicks = pullpush(sink, click("button25"));
	return pullpush(sink, html("div26"), clicks? input1: undefined);
}
function sum54(sink, a, b){
	let x = typeof a === "function"? pullpush(sink("a"), a): a;
	let y = typeof b === "function"? pullpush(sink("b"), b): b;
	return Number(x) + Number(y);
}
function product54(sink, a, b){
	let x = typeof a === "function"? pullpush(sink("a"), a): a;
	let y = typeof b === "function"? pullpush(sink("b"), b): b;
	return Number(x) * Number(y);
}
function chain54(sink){
	// (2 * (3 + (input27 * (1 + (2 * input27))))
	return pullpush(sink, chain(product54, input("input27"))(sum54, 1)(product54, input("input27"))(sum54, 3)(product54, 2)(), 2);
}
function composition55(sink){
	// (2 * (3 + (input27 * (1 + (2 * input27))))
	return pullpush(sink, composition(curry(product54, 2), curry(sum54, 3), curry(product54, input("input27")), curry(sum54, 1), curry(product54, input("input27"))), 2);
}
function eval56(sink){
	let triggered = pullpush(sink, trigger(click("button28")));
	let expression = pullpush(sink, input("input29"), triggered? "NaN": undefined);
	let value = eval(expression);
	return value;
}
function error56(sink, exception){
	let expression = pullpush(sink, input("input29"));
	let value = "invalid expression: " + expression;
	return value;
}
function fibonacci57(sink){
	let triggered = pullpush(sink, trigger(counter), 500);
	if(triggered){
		let value2a = pullpush(sink(2), local, 1);
		let value1a = pullpush(sink(1), local, 1, value2a);
		let value0a = pullpush(sink(0), local, 0, value1a);
		return value0a + value1a;
	}
	let value1b = pullpush(sink(1), local, 1);
	let value0b = pullpush(sink(0), local, 0);
	return pullpush(sink(2), local, 1, value0b + value1b);
}
function series57(sink){
	pullpush(sink, false); // declaration to not keep unused sources
	let triggered30 = pullpush(sink, trigger(click("button30")));
	let triggered31 = pullpush(sink, trigger(click("button31")));
	let triggered32 = pullpush(sink, trigger(click("button32")));
	let triggered33 = pullpush(sink, trigger(click("button33")));
	let triggered34 = pullpush(sink, trigger(click("button34")));
	let triggered35 = pullpush(sink, trigger(click("button35")));
	let triggered36 = pullpush(sink, trigger(click("button36")));
	let triggered37 = pullpush(sink, trigger(click("button37")));
	let triggered38 = pullpush(sink, trigger(click("button38")));
	let triggered39 = pullpush(sink, trigger(click("button39")));
	let triggered40 = pullpush(sink, trigger(click("button40")));
	let source = pullpush(sink, local, undefined, triggered30 && times(fibonacci57, 0) || triggered31 && once(fibonacci57) || triggered32 && times(fibonacci57, 2) || triggered33 && times(fibonacci57, 3) || triggered34 && times(fibonacci57, 4) || triggered35 && nth(fibonacci57, 1) || triggered36 && nth(fibonacci57, 2) || triggered37 && nth(fibonacci57, 3) || triggered38 && nth(fibonacci57, 4) || triggered39 && clipper(fibonacci57, 4, 7) || triggered40 && skipper(fibonacci57, 7) || undefined);
	return source && pullpush(sink, source) || "";
}
function onceuponatime58(sink){
	return "once upon a time";
}
pullpush(sink, sink1);
pullpush(sink, sink2);
pullpush(sink, sink3);
pullpush(sink, sink4);
pullpush(sink, sink5);
pullpush(sink, sink6);
pullpush(sink, sink7);
pullpush(sink, sink8);
pullpush(sink, sink9);
pullpush(sink, sink10);
pullpush(sink, sink11);
pullpush(sink, sink12);
pullpush(sink, sink13);
pullpush(sink, sink14);
pullpush(sink, sink15);
pullpush(sink, sink16);
pullpush(sink, sink17);
pullpush(sink, sink18);
pullpush(sink, sink19);
pullpush(sink, sink20);
pullpush(sink, sink21);
pullpush(sink, sink22);
pullpush(sink, sink23);
pullpush(sink, sink24);
pullpush(sink, sink25);
pullpush(sink, sink26);
pullpush(sink, sink27);
pullpush(sink, sink28);
pullpush(sink, sink29);
pullpush(sink, sink30);
pullpush(sink, sink31);
pullpush(sink, sink32);
pullpush(sink, sink33);
pullpush(sink, sink34);
pullpush(sink, sink35);
pullpush(sink, sink36);
pullpush(sink, sink37);
pullpush(sink, sink38);
pullpush(sink, sink39);
pullpush(sink, sink40);
pullpush(sink, sink41);
pullpush(sink, sink42);
pullpush(sink, sink43);
pullpush(sink, sink44);
pullpush(sink, sink45);
pullpush(sink, sink46);
pullpush(sink, sink47);
pullpush(sink, sink48);
pullpush(sink, sink49);
pullpush(sink, sink50);
pullpush(sink, sink51);
pullpush(sink, sink52);
pullpush(sink, sink53);
pullpush(sink, sink54);
pullpush(sink, sink55);
pullpush(sink, sink56);
pullpush(sink, sink57);
pullpush(sink, sink58);
pullpush(sink, sink59);
pullpush(sink, sink60);
pullpush(sink, sink61);
pullpush(sink, sink62);
pullpush(sink, sink63);
pullpush(sink, sink64);
pullpush(sink, sink65);
pullpush(sink, sink66);
pullpush(sink, sink67);
pullpush(sink, sink68);
pullpush(sink, sink69);
pullpush(sink, sink70);
pullpush(sink, sink71);
pullpush(sink, sink72);
</script>
</body>
</html>
